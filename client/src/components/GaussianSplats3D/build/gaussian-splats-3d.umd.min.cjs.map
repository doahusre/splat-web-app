{"version":3,"file":"gaussian-splats-3d.umd.min.cjs","sources":["../src/SplatBuffer.js","../src/Util.js","../src/PlyParser.js","../src/PlyLoader.js","../src/SplatLoader.js","../src/OrbitControls.js","../src/LoadingSpinner.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/splattree/SplatTreeNode.js","../src/splattree/SplatTree.js","../src/SplatMesh.js","../src/Constants.js","../src/worker/SortWorker.js","../src/Viewer.js","../src/worker/sorter.wasm"],"sourcesContent":["import * as THREE from 'three';\n\nconst tempVector3A = new THREE.Vector3();\nconst tempVector3B = new THREE.Vector3();\nconst tempVector4A = new THREE.Vector4();\nconst tempVector4B = new THREE.Vector4();\nconst tempQuaternion4A = new THREE.Quaternion();\nconst tempQuaternion4B = new THREE.Quaternion();\n\nlet fbf;\nlet tbf;\n\nexport class SplatBuffer {\n\n    static CenterComponentCount = 3;\n    static ScaleComponentCount = 3;\n    static RotationComponentCount = 4;\n    static ColorComponentCount = 4;\n\n    static CompressionLevels = {\n        0: {\n            BytesPerCenter: 12,\n            BytesPerScale: 12,\n            BytesPerColor: 4,\n            BytesPerRotation: 16,\n            ScaleRange: 1\n        },\n        1: {\n            BytesPerCenter: 6,\n            BytesPerScale: 6,\n            BytesPerColor: 4,\n            BytesPerRotation: 8,\n            ScaleRange: 32767\n        }\n    };\n\n    static CovarianceSizeFloats = 6;\n    static CovarianceSizeBytes = 24;\n\n    static HeaderSizeBytes = 1024;\n\n    constructor(bufferData) {\n        this.headerBufferData = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\n        this.headerArrayUint8 = new Uint8Array(this.headerBufferData);\n        this.headerArrayUint32 = new Uint32Array(this.headerBufferData);\n        this.headerArrayFloat32 = new Float32Array(this.headerBufferData);\n        this.headerArrayUint8.set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\n        this.versionMajor = this.headerArrayUint8[0];\n        this.versionMinor = this.headerArrayUint8[1];\n        this.headerExtraK = this.headerArrayUint8[2];\n        this.compressionLevel = this.headerArrayUint8[3];\n        this.splatCount = this.headerArrayUint32[1];\n        this.bucketSize = this.headerArrayUint32[2];\n        this.bucketCount = this.headerArrayUint32[3];\n        this.bucketBlockSize = this.headerArrayFloat32[4];\n        this.halfBucketBlockSize = this.bucketBlockSize / 2.0;\n        this.bytesPerBucket = this.headerArrayUint32[5];\n        this.compressionScaleRange = this.headerArrayUint32[6] || SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\n        this.compressionScaleFactor = this.halfBucketBlockSize / this.compressionScaleRange;\n\n        const dataBufferSizeBytes = bufferData.byteLength - SplatBuffer.HeaderSizeBytes;\n        this.splatBufferData = new ArrayBuffer(dataBufferSizeBytes);\n        new Uint8Array(this.splatBufferData).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes, dataBufferSizeBytes));\n\n        this.bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\n        this.bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\n        this.bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\n        this.bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\n\n        this.bytesPerSplat = this.bytesPerCenter + this.bytesPerScale + this.bytesPerColor + this.bytesPerRotation;\n\n        fbf = this.fbf.bind(this);\n        tbf = this.tbf.bind(this);\n\n        this.linkBufferArrays();\n    }\n\n    linkBufferArrays() {\n        let FloatArray = (this.compressionLevel === 0) ? Float32Array : Uint16Array;\n        this.centerArray = new FloatArray(this.splatBufferData, 0, this.splatCount * SplatBuffer.CenterComponentCount);\n        this.scaleArray = new FloatArray(this.splatBufferData, this.bytesPerCenter * this.splatCount,\n                                         this.splatCount * SplatBuffer.ScaleComponentCount);\n        this.colorArray = new Uint8Array(this.splatBufferData, (this.bytesPerCenter + this.bytesPerScale) * this.splatCount,\n                                         this.splatCount * SplatBuffer.ColorComponentCount);\n        this.rotationArray = new FloatArray(this.splatBufferData,\n                                             (this.bytesPerCenter + this.bytesPerScale + this.bytesPerColor) * this.splatCount,\n                                              this.splatCount * SplatBuffer.RotationComponentCount);\n        this.bucketsBase = this.splatCount * this.bytesPerSplat;\n    }\n\n    fbf(f) {\n        if (this.compressionLevel === 0) {\n            return f;\n        } else {\n            return THREE.DataUtils.fromHalfFloat(f);\n        }\n    };\n\n    tbf(f) {\n        if (this.compressionLevel === 0) {\n            return f;\n        } else {\n            return THREE.DataUtils.toHalfFloat(f);\n        }\n    };\n\n    getHeaderBufferData() {\n        return this.headerBufferData;\n    }\n\n    getSplatBufferData() {\n        return this.splatBufferData;\n    }\n\n    getCenter(index, outCenter = new THREE.Vector3()) {\n        let bucket = [0, 0, 0];\n        const centerBase = index * SplatBuffer.CenterComponentCount;\n        if (this.compressionLevel > 0) {\n            const sf = this.compressionScaleFactor;\n            const sr = this.compressionScaleRange;\n            const bucketIndex = Math.floor(index / this.bucketSize);\n            bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\n            outCenter.x = (this.centerArray[centerBase] - sr) * sf + bucket[0];\n            outCenter.y = (this.centerArray[centerBase + 1] - sr) * sf + bucket[1];\n            outCenter.z = (this.centerArray[centerBase + 2] - sr) * sf + bucket[2];\n        } else {\n            outCenter.x = this.centerArray[centerBase];\n            outCenter.y = this.centerArray[centerBase + 1];\n            outCenter.z = this.centerArray[centerBase + 2];\n        }\n        return outCenter;\n    }\n\n    setCenter(index, center) {\n        let bucket = [0, 0, 0];\n        const centerBase = index * SplatBuffer.CenterComponentCount;\n        if (this.compressionLevel > 0) {\n            const sf = 1.0 / this.compressionScaleFactor;\n            const sr = this.compressionScaleRange;\n            const maxR = sr * 2 + 1;\n            const bucketIndex = Math.floor(index / this.bucketSize);\n            bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\n            this.centerArray[centerBase] = clamp(Math.round((center.x - bucket[0]) * sf) + sr, 0, maxR);\n            this.centerArray[centerBase + 1] = clamp(Math.round((center.y - bucket[1]) * sf) + sr, 0, maxR);\n            this.centerArray[centerBase + 2] = clamp(Math.round((center.z - bucket[2]) * sf) + sr, 0, maxR);\n        } else {\n            this.centerArray[centerBase] = center.x;\n            this.centerArray[centerBase + 1] = center.y;\n            this.centerArray[centerBase + 2] = center.z;\n        }\n    }\n\n    getScale(index, outScale = new THREE.Vector3()) {\n        const scaleBase = index * SplatBuffer.ScaleComponentCount;\n        outScale.set(fbf(this.scaleArray[scaleBase]), fbf(this.scaleArray[scaleBase + 1]), fbf(this.scaleArray[scaleBase + 2]));\n        return outScale;\n    }\n\n    setScale(index, scale) {\n        const scaleBase = index * SplatBuffer.ScaleComponentCount;\n        this.scaleArray[scaleBase] = tbf(scale.x);\n        this.scaleArray[scaleBase + 1] = tbf(scale.y);\n        this.scaleArray[scaleBase + 2] = tbf(scale.z);\n    }\n\n    getRotation(index, outRotation = new THREE.Quaternion()) {\n        const rotationBase = index * SplatBuffer.RotationComponentCount;\n        outRotation.set(fbf(this.rotationArray[rotationBase + 1]), fbf(this.rotationArray[rotationBase + 2]),\n                        fbf(this.rotationArray[rotationBase + 3]), fbf(this.rotationArray[rotationBase]));\n        return outRotation;\n    }\n\n    setRotation(index, rotation) {\n        const rotationBase = index * SplatBuffer.RotationComponentCount;\n        this.rotationArray[rotationBase] = tbf(rotation.w);\n        this.rotationArray[rotationBase + 1] = tbf(rotation.x);\n        this.rotationArray[rotationBase + 2] = tbf(rotation.y);\n        this.rotationArray[rotationBase + 3] = tbf(rotation.z);\n    }\n\n    getColor(index, outColor = new THREE.Vector4()) {\n        const colorBase = index * SplatBuffer.ColorComponentCount;\n        outColor.set(this.colorArray[colorBase], this.colorArray[colorBase + 1],\n                     this.colorArray[colorBase + 2], this.colorArray[colorBase + 3]);\n        return outColor;\n    }\n\n    setColor(index, color) {\n        const colorBase = index * SplatBuffer.ColorComponentCount;\n        this.colorArray[colorBase] = color.x;\n        this.colorArray[colorBase + 1] = color.y;\n        this.colorArray[colorBase + 2] = color.z;\n        this.colorArray[colorBase + 3] = color.w;\n    }\n\n    getSplatCount() {\n        return this.splatCount;\n    }\n\n    fillCovarianceArray(covarianceArray) {\n        const splatCount = this.splatCount;\n\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n        const rotationMatrix = new THREE.Matrix3();\n        const scaleMatrix = new THREE.Matrix3();\n        const covarianceMatrix = new THREE.Matrix3();\n        const tempMatrix4 = new THREE.Matrix4();\n\n        for (let i = 0; i < splatCount; i++) {\n            const scaleBase = i * SplatBuffer.ScaleComponentCount;\n            scale.set(fbf(this.scaleArray[scaleBase]), fbf(this.scaleArray[scaleBase + 1]), fbf(this.scaleArray[scaleBase + 2]));\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n            scaleMatrix.setFromMatrix4(tempMatrix4);\n\n            const rotationBase = i * SplatBuffer.RotationComponentCount;\n            rotation.set(fbf(this.rotationArray[rotationBase + 1]),\n                         fbf(this.rotationArray[rotationBase + 2]),\n                         fbf(this.rotationArray[rotationBase + 3]),\n                         fbf(this.rotationArray[rotationBase]));\n            tempMatrix4.makeRotationFromQuaternion(rotation);\n            rotationMatrix.setFromMatrix4(tempMatrix4);\n\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n            const M = covarianceMatrix.elements;\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i] = M[0] * M[0] + M[3] * M[3] + M[6] * M[6];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 1] = M[0] * M[1] + M[3] * M[4] + M[6] * M[7];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 2] = M[0] * M[2] + M[3] * M[5] + M[6] * M[8];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 3] = M[1] * M[1] + M[4] * M[4] + M[7] * M[7];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 4] = M[1] * M[2] + M[4] * M[5] + M[7] * M[8];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 5] = M[2] * M[2] + M[5] * M[5] + M[8] * M[8];\n        }\n    }\n\n    fillCenterArray(outCenterArray) {\n        const splatCount = this.splatCount;\n        let bucket = [0, 0, 0];\n        for (let i = 0; i < splatCount; i++) {\n            const centerBase = i * SplatBuffer.CenterComponentCount;\n            if (this.compressionLevel > 0) {\n                const bucketIndex = Math.floor(i / this.bucketSize);\n                bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\n                const sf = this.compressionScaleFactor;\n                const sr = this.compressionScaleRange;\n                outCenterArray[centerBase] = (this.centerArray[centerBase] - sr) * sf + bucket[0];\n                outCenterArray[centerBase + 1] = (this.centerArray[centerBase + 1] - sr) * sf + bucket[1];\n                outCenterArray[centerBase + 2] = (this.centerArray[centerBase + 2] - sr) * sf + bucket[2];\n            } else {\n                outCenterArray[centerBase] = this.centerArray[centerBase];\n                outCenterArray[centerBase + 1] = this.centerArray[centerBase + 1];\n                outCenterArray[centerBase + 2] = this.centerArray[centerBase + 2];\n            }\n        }\n    }\n\n    fillScaleArray(outScaleArray) {\n        const fbf = this.fbf.bind(this);\n        const splatCount = this.splatCount;\n        for (let i = 0; i < splatCount; i++) {\n            const scaleBase = i * SplatBuffer.ScaleComponentCount;\n            outScaleArray[scaleBase] = fbf(this.scaleArray[scaleBase]);\n            outScaleArray[scaleBase + 1] = fbf(this.scaleArray[scaleBase + 1]);\n            outScaleArray[scaleBase + 2] = fbf(this.scaleArray[scaleBase + 2]);\n        }\n    }\n\n    fillRotationArray(outRotationArray) {\n        const fbf = this.fbf.bind(this);\n        const splatCount = this.splatCount;\n        for (let i = 0; i < splatCount; i++) {\n            const rotationBase = i * SplatBuffer.RotationComponentCount;\n            outRotationArray[rotationBase] = fbf(this.rotationArray[rotationBase]);\n            outRotationArray[rotationBase + 1] = fbf(this.rotationArray[rotationBase + 1]);\n            outRotationArray[rotationBase + 2] = fbf(this.rotationArray[rotationBase + 2]);\n            outRotationArray[rotationBase + 3] = fbf(this.rotationArray[rotationBase + 3]);\n        }\n    }\n\n    fillColorArray(outColorArray) {\n        const splatCount = this.splatCount;\n        for (let i = 0; i < splatCount; i++) {\n            const colorBase = i * SplatBuffer.ColorComponentCount;\n            outColorArray[colorBase] = this.colorArray[colorBase];\n            outColorArray[colorBase + 1] = this.colorArray[colorBase + 1];\n            outColorArray[colorBase + 2] = this.colorArray[colorBase + 2];\n            outColorArray[colorBase + 3] = this.colorArray[colorBase + 3];\n        }\n    }\n\n    swapVertices(indexA, indexB) {\n\n        this.getCenter(indexA, tempVector3A);\n        this.getCenter(indexB, tempVector3B);\n        this.setCenter(indexB, tempVector3A);\n        this.setCenter(indexA, tempVector3B);\n\n        this.getScale(indexA, tempVector3A);\n        this.getScale(indexB, tempVector3B);\n        this.setScale(indexB, tempVector3A);\n        this.setScale(indexA, tempVector3B);\n\n        this.getRotation(indexA, tempQuaternion4A);\n        this.getRotation(indexB, tempQuaternion4B);\n        this.setRotation(indexB, tempQuaternion4A);\n        this.setRotation(indexA, tempQuaternion4B);\n\n        this.getColor(indexA, tempVector4A);\n        this.getColor(indexB, tempVector4B);\n        this.setColor(indexB, tempVector4A);\n        this.setColor(indexA, tempVector4B);\n\n    }\n\n}\n","export const floatToHalf = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(val) {\n        floatView[0] = val;\n        const x = int32View[0];\n\n        let bits = (x >> 16) & 0x8000;\n        let m = (x >> 12) & 0x07ff;\n        const e = (x >> 23) & 0xff;\n\n        if (e < 103) return bits;\n\n        if (e > 142) {\n            bits |= 0x7c00;\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\n            return bits;\n        }\n\n        if (e < 113) {\n            m |= 0x0800;\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n            return bits;\n        }\n\n        bits |= (( e - 112) << 10) | (m >> 1);\n        bits += m & 1;\n        return bits;\n    };\n\n}();\n\nexport const uintEncodedFloat = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(f) {\n        floatView[0] = f;\n        return int32View[0];\n    };\n\n}();\n\nexport const rgbaToInteger = function(r, g, b, a) {\n    return r + (g << 8) + (b << 16) + (a << 24);\n};\n\nexport const fetchWithProgress = function(path, onProgress) {\n\n    return new Promise((resolve, reject) => {\n        fetch(path)\n        .then(async (data) => {\n            const reader = data.body.getReader();\n            let bytesDownloaded = 0;\n            let _fileSize = data.headers.get('Content-Length');\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\n\n            const chunks = [];\n\n            while (true) {\n                try {\n                    const { value: chunk, done } = await reader.read();\n                    if (done) {\n                        if (onProgress) {\n                            onProgress(100, '100%', chunk);\n                        }\n                        const buffer = new Blob(chunks).arrayBuffer();\n                        resolve(buffer);\n                        break;\n                    }\n                    bytesDownloaded += chunk.length;\n                    let percent;\n                    let percentLabel;\n                    if (fileSize !== undefined) {\n                        percent = bytesDownloaded / fileSize * 100;\n                        percentLabel = `${percent.toFixed(2)}%`;\n                    }\n                    chunks.push(chunk);\n                    if (onProgress) {\n                        onProgress(percent, percentLabel, chunk);\n                    }\n                } catch (error) {\n                    reject(error);\n                    break;\n                }\n            }\n        });\n    });\n\n};\n\nexport const clamp = function(val, min, max) {\n    return Math.max(Math.min(val, max), min);\n};\n\nexport const getCurrentTime = function() {\n    return performance.now() / 1000;\n};\n","import { SplatBuffer } from './SplatBuffer.js';\nimport { clamp } from './Util.js';\nimport * as THREE from 'three';\n\nconst SplatBufferBucketSize = 256;\nconst SplatBufferBucketBlockSize = 5.0;\n\nexport class PlyParser {\n\n    constructor(plyBuffer) {\n        this.plyBuffer = plyBuffer;\n    }\n\n    decodeHeader(plyBuffer) {\n        const decoder = new TextDecoder();\n        let headerOffset = 0;\n        let headerText = '';\n\n        console.log('.PLY size: ' + plyBuffer.byteLength + ' bytes');\n\n        const readChunkSize = 100;\n\n        while (true) {\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n                throw new Error('End of file reached while searching for end of header');\n            }\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += readChunkSize;\n\n            const endHeaderTestChunk = new Uint8Array(plyBuffer, Math.max(0, headerOffset - readChunkSize * 2), readChunkSize * 2);\n            const endHeaderTestText = decoder.decode(endHeaderTestChunk);\n            if (endHeaderTestText.includes('end_header')) {\n                break;\n            }\n        }\n\n        const headerLines = headerText.split('\\n');\n\n        let splatCount = 0;\n        let propertyTypes = {};\n\n        for (let i = 0; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            if (line.startsWith('element vertex')) {\n                const splatCountMatch = line.match(/\\d+/);\n                if (splatCountMatch) {\n                    splatCount = parseInt(splatCountMatch[0]);\n                }\n            } else if (line.startsWith('property')) {\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (propertyMatch) {\n                    const propertyType = propertyMatch[2];\n                    const propertyName = propertyMatch[3];\n                    propertyTypes[propertyName] = propertyType;\n                }\n            } else if (line === 'end_header') {\n                break;\n            }\n        }\n\n        const vertexByteOffset = headerText.indexOf('end_header') + 'end_header'.length + 1;\n        const vertexData = new DataView(plyBuffer, vertexByteOffset);\n\n        return {\n            'splatCount': splatCount,\n            'propertyTypes': propertyTypes,\n            'vertexData': vertexData,\n            'headerOffset': headerOffset\n        };\n    }\n\n    readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\n        let rawVertex = outVertex || {};\n        for (let property of propertiesToRead) {\n            const propertyType = propertyTypes[property];\n            if (propertyType === 'float') {\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\n            } else if (propertyType === 'uchar') {\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\n            }\n        }\n    }\n\n    parseToSplatBuffer(compressionLevel = 0, minimumAlpha = 1) {\n\n        const startTime = performance.now();\n\n        console.log('Parsing PLY to SPLAT...');\n\n        const {splatCount, propertyTypes, vertexData} = this.decodeHeader(this.plyBuffer);\n\n        // figure out the SH degree from the number of coefficients\n        let nRestCoeffs = 0;\n        for (const propertyName in propertyTypes) {\n            if (propertyName.startsWith('f_rest_')) {\n                nRestCoeffs += 1;\n            }\n        }\n        const nCoeffsPerColor = nRestCoeffs / 3;\n\n        // TODO: Eventually properly support multiple degree spherical harmonics\n        // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\n        const sphericalHarmonicsDegree = 0;\n\n        console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\n\n        // figure out the order in which spherical harmonics should be read\n        const shFeatureOrder = [];\n        for (let rgb = 0; rgb < 3; ++rgb) {\n            shFeatureOrder.push(`f_dc_${rgb}`);\n        }\n        for (let i = 0; i < nCoeffsPerColor; ++i) {\n            for (let rgb = 0; rgb < 3; ++rgb) {\n                shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\n            }\n        }\n\n        let plyRowSize = 0;\n        let fieldOffsets = {};\n        const fieldSize = {\n            'double': 8,\n            'int': 4,\n            'uint': 4,\n            'float': 4,\n            'short': 2,\n            'ushort': 2,\n            'uchar': 1,\n        };\n        for (let fieldName in propertyTypes) {\n            if (propertyTypes.hasOwnProperty(fieldName)) {\n                const type = propertyTypes[fieldName];\n                fieldOffsets[fieldName] = plyRowSize;\n                plyRowSize += fieldSize[type];\n            }\n        }\n\n        let rawVertex = {};\n\n        const propertiesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\n                                  'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity'];\n\n        const validVertexes = [];\n        // dummy vertex used for invalid vertexes\n        const vertexZero = {};\n        for (let propertyToRead of propertiesToRead) vertexZero[propertyToRead] = 0;\n        validVertexes.push(vertexZero);\n        for (let row = 0; row < splatCount; row++) {\n            this.readRawVertexFast(vertexData, row * plyRowSize, fieldOffsets, propertiesToRead, propertyTypes, rawVertex);\n            let alpha;\n            if (propertyTypes['opacity']) {\n                alpha = (1 / (1 + Math.exp(-rawVertex.opacity))) * 255;\n            } else {\n                alpha = 255;\n            }\n            if (alpha > minimumAlpha) {\n                const newVertex = {};\n                for (let propertyToRead of propertiesToRead) newVertex[propertyToRead] = rawVertex[propertyToRead];\n                validVertexes.push(newVertex);\n            }\n        }\n\n        console.log('Total valid splats: ', validVertexes.length, 'out of', splatCount);\n\n        const centersForBucketCalcs = [];\n        for (let row = 0; row < validVertexes.length; row++) {\n            rawVertex = validVertexes[row];\n            centersForBucketCalcs.push([rawVertex.x, rawVertex.y, rawVertex.z]);\n        }\n        const buckets = this.computeBuckets(centersForBucketCalcs);\n\n        const paddedSplatCount = buckets.length * SplatBufferBucketSize;\n        const headerSize = SplatBuffer.HeaderSizeBytes;\n        const header = new Uint8Array(new ArrayBuffer(headerSize));\n        header[3] = compressionLevel;\n        (new Uint32Array(header.buffer, 4, 1))[0] = paddedSplatCount;\n\n        let bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n        let bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n        let bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n        let bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n        const centerBuffer = new ArrayBuffer(bytesPerCenter * paddedSplatCount);\n        const scaleBuffer = new ArrayBuffer(bytesPerScale * paddedSplatCount);\n        const colorBuffer = new ArrayBuffer(bytesPerColor * paddedSplatCount);\n        const rotationBuffer = new ArrayBuffer(bytesPerRotation * paddedSplatCount);\n\n        const blockHalfSize = SplatBufferBucketBlockSize / 2.0;\n        const compressionScaleRange = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n        const compressionScaleFactor = compressionScaleRange / blockHalfSize;\n        const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\n\n        const bucketCenter = new THREE.Vector3();\n        const bucketCenterDelta = new THREE.Vector3();\n        let outSplatIndex = 0;\n        for (let b = 0; b < buckets.length; b++) {\n            const bucket = buckets[b];\n            bucketCenter.fromArray(bucket.center);\n            for (let i = 0; i < bucket.splats.length; i++) {\n                let row = bucket.splats[i];\n                let invalidSplat = false;\n                if (row === 0) {\n                    invalidSplat = true;\n                }\n                rawVertex = validVertexes[row];\n\n                if (compressionLevel === 0) {\n                    const center = new Float32Array(centerBuffer, outSplatIndex * bytesPerCenter, 3);\n                    const scales = new Float32Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\n                    const rot = new Float32Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\n                    if (propertyTypes['scale_0']) {\n                        const quat = new THREE.Quaternion(rawVertex.rot_1, rawVertex.rot_2, rawVertex.rot_3, rawVertex.rot_0);\n                        quat.normalize();\n                        rot.set([quat.w, quat.x, quat.y, quat.z]);\n                        scales.set([Math.exp(rawVertex.scale_0), Math.exp(rawVertex.scale_1), Math.exp(rawVertex.scale_2)]);\n                    } else {\n                        scales.set([0.01, 0.01, 0.01]);\n                        rot.set([1.0, 0.0, 0.0, 0.0]);\n                    }\n                    center.set([rawVertex.x, rawVertex.y, rawVertex.z]);\n                } else {\n                    const center = new Uint16Array(centerBuffer, outSplatIndex * bytesPerCenter, 3);\n                    const scales = new Uint16Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\n                    const rot = new Uint16Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\n                    const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\n                    if (propertyTypes['scale_0']) {\n                        const quat = new THREE.Quaternion(rawVertex.rot_1, rawVertex.rot_2, rawVertex.rot_3, rawVertex.rot_0);\n                        quat.normalize();\n                        rot.set([thf(quat.w), thf(quat.x), thf(quat.y), thf(quat.z)]);\n                        scales.set([thf(Math.exp(rawVertex.scale_0)), thf(Math.exp(rawVertex.scale_1)), thf(Math.exp(rawVertex.scale_2))]);\n                    } else {\n                        scales.set([thf(0.01), thf(0.01), thf(0.01)]);\n                        rot.set([thf(1.), 0, 0, 0]);\n                    }\n                    bucketCenterDelta.set(rawVertex.x, rawVertex.y, rawVertex.z).sub(bucketCenter);\n                    bucketCenterDelta.x = Math.round(bucketCenterDelta.x * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.x = clamp(bucketCenterDelta.x, 0, doubleCompressionScaleRange);\n                    bucketCenterDelta.y = Math.round(bucketCenterDelta.y * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.y = clamp(bucketCenterDelta.y, 0, doubleCompressionScaleRange);\n                    bucketCenterDelta.z = Math.round(bucketCenterDelta.z * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.z = clamp(bucketCenterDelta.z, 0, doubleCompressionScaleRange);\n                    center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\n                }\n\n                const rgba = new Uint8ClampedArray(colorBuffer, outSplatIndex * bytesPerColor, 4);\n                if (invalidSplat) {\n                    rgba[0] = 255;\n                    rgba[1] = 0;\n                    rgba[2] = 0;\n                    rgba[3] = 0;\n                } else {\n                    if (propertyTypes['f_dc_0']) {\n                        const SH_C0 = 0.28209479177387814;\n                        rgba.set([(0.5 + SH_C0 * rawVertex.f_dc_0) * 255,\n                                  (0.5 + SH_C0 * rawVertex.f_dc_1) * 255,\n                                  (0.5 + SH_C0 * rawVertex.f_dc_2) * 255]);\n                    } else {\n                        rgba.set([255, 0, 0]);\n                    }\n                    if (propertyTypes['opacity']) {\n                        rgba[3] = (1 / (1 + Math.exp(-rawVertex.opacity))) * 255;\n                    } else {\n                        rgba[3] = 255;\n                    }\n                }\n\n                outSplatIndex++;\n            }\n        }\n\n        const bytesPerBucket = 12;\n        const bucketsSize = bytesPerBucket * buckets.length;\n        const splatDataBufferSize = centerBuffer.byteLength + scaleBuffer.byteLength +\n                                    colorBuffer.byteLength + rotationBuffer.byteLength;\n\n        const headerArrayUint32 = new Uint32Array(header.buffer);\n        const headerArrayFloat32 = new Float32Array(header.buffer);\n        let unifiedBufferSize = headerSize + splatDataBufferSize;\n        if (compressionLevel > 0) {\n            unifiedBufferSize += bucketsSize;\n            headerArrayUint32[2] = SplatBufferBucketSize;\n            headerArrayUint32[3] = buckets.length;\n            headerArrayFloat32[4] = SplatBufferBucketBlockSize;\n            headerArrayUint32[5] = bytesPerBucket;\n            headerArrayUint32[6] = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n        }\n\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\n        new Uint8Array(unifiedBuffer, 0, headerSize).set(header);\n        new Uint8Array(unifiedBuffer, headerSize, centerBuffer.byteLength).set(new Uint8Array(centerBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength, scaleBuffer.byteLength).set(new Uint8Array(scaleBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength + scaleBuffer.byteLength,\n                       colorBuffer.byteLength).set(new Uint8Array(colorBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength + scaleBuffer.byteLength + colorBuffer.byteLength,\n                       rotationBuffer.byteLength).set(new Uint8Array(rotationBuffer));\n\n        if (compressionLevel > 0) {\n            const bucketArray = new Float32Array(unifiedBuffer, headerSize + splatDataBufferSize, buckets.length * 3);\n            for (let i = 0; i < buckets.length; i++) {\n                const bucket = buckets[i];\n                const base = i * 3;\n                bucketArray[base] = bucket.center[0];\n                bucketArray[base + 1] = bucket.center[1];\n                bucketArray[base + 2] = bucket.center[2];\n            }\n        }\n\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\n\n        const endTime = performance.now();\n\n        console.log('Parsing PLY to SPLAT complete!');\n        console.log('Total time: ', (endTime - startTime).toFixed(2) + ' ms');\n\n        return splatBuffer;\n    }\n\n    computeBuckets(centers) {\n        const blockSize = SplatBufferBucketBlockSize;\n        const halfBlockSize = blockSize / 2.0;\n        const splatCount = centers.length;\n\n        const min = new THREE.Vector3();\n        const max = new THREE.Vector3();\n\n        // ignore the first splat since it's the invalid designator\n        for (let i = 1; i < splatCount; i++) {\n            const center = centers[i];\n            if (i === 0 || center[0] < min.x) min.x = center[0];\n            if (i === 0 || center[0] > max.x) max.x = center[0];\n            if (i === 0 || center[1] < min.y) min.y = center[1];\n            if (i === 0 || center[1] > max.y) max.y = center[1];\n            if (i === 0 || center[2] < min.z) min.z = center[2];\n            if (i === 0 || center[2] > max.z) max.z = center[2];\n        }\n\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\n\n        const blockCenter = new THREE.Vector3();\n        const fullBuckets = [];\n        const partiallyFullBuckets = {};\n\n        // ignore the first splat since it's the invalid designator\n        for (let i = 1; i < splatCount; i++) {\n            const center = centers[i];\n            const xBlock = Math.ceil((center[0] - min.x) / blockSize);\n            const yBlock = Math.ceil((center[1] - min.y) / blockSize);\n            const zBlock = Math.ceil((center[2] - min.z) / blockSize);\n\n            blockCenter.x = (xBlock - 1) * blockSize + min.x + halfBlockSize;\n            blockCenter.y = (yBlock - 1) * blockSize + min.y + halfBlockSize;\n            blockCenter.z = (zBlock - 1) * blockSize + min.z + halfBlockSize;\n\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\n            let bucket = partiallyFullBuckets[bucketId];\n            if (!bucket) {\n                partiallyFullBuckets[bucketId] = bucket = {\n                    'splats': [],\n                    'center': blockCenter.toArray()\n                };\n            }\n\n            bucket.splats.push(i);\n            if (bucket.splats.length >= SplatBufferBucketSize) {\n                fullBuckets.push(bucket);\n                partiallyFullBuckets[bucketId] = null;\n            }\n        }\n\n        // fill partially full buckets with invalid splats (splat 0)\n        // to get them up to SplatBufferBucketSize\n        for (let bucketId in partiallyFullBuckets) {\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\n                const bucket = partiallyFullBuckets[bucketId];\n                if (bucket) {\n                    while (bucket.splats.length < SplatBufferBucketSize) {\n                        bucket.splats.push(0);\n                    }\n                    fullBuckets.push(bucket);\n                }\n            }\n        }\n\n        return fullBuckets;\n    }\n}\n","import { PlyParser } from './PlyParser.js';\nimport { fetchWithProgress } from './Util.js';\n\nexport class PlyLoader {\n\n    constructor() {\n        this.splatBuffer = null;\n    }\n\n    fetchFile(fileName, onProgress) {\n        return new Promise((resolve, reject) => {\n            fetchWithProgress(fileName, onProgress)\n            .then((data) => {\n                resolve(data);\n            })\n            .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    loadFromURL(fileName, onProgress, compressionLevel = 0, minimumAlpha = 1) {\n        return new Promise((resolve, reject) => {\n            const loadPromise = this.fetchFile(fileName, onProgress);\n            loadPromise\n            .then((plyFileData) => {\n                const plyParser = new PlyParser(plyFileData);\n                const splatBuffer = plyParser.parseToSplatBuffer(compressionLevel, minimumAlpha);\n                this.splatBuffer = splatBuffer;\n                resolve(splatBuffer);\n            })\n            .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n}\n","import { SplatBuffer } from './SplatBuffer.js';\nimport { fetchWithProgress } from './Util.js';\n\nexport class SplatLoader {\n\n    constructor(splatBuffer = null) {\n        this.splatBuffer = splatBuffer;\n        this.downLoadLink = null;\n    }\n\n    loadFromURL(fileName, onProgress) {\n        return new Promise((resolve, reject) => {\n            fetchWithProgress(fileName, onProgress)\n            .then((bufferData) => {\n                const splatBuffer = new SplatBuffer(bufferData);\n                resolve(splatBuffer);\n            })\n            .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    setFromBuffer(splatBuffer) {\n        this.splatBuffer = splatBuffer;\n    }\n\n    downloadFile(fileName) {\n        const headerData = new Uint8Array(this.splatBuffer.getHeaderBufferData());\n        const splatData = new Uint8Array(this.splatBuffer.getSplatBufferData());\n        const blob = new Blob([headerData.buffer, splatData.buffer], {\n            type: 'application/octet-stream',\n        });\n\n        if (!this.downLoadLink) {\n            this.downLoadLink = document.createElement('a');\n            document.body.appendChild(this.downLoadLink);\n        }\n        this.downLoadLink.download = fileName;\n        this.downLoadLink.href = URL.createObjectURL(blob);\n        this.downLoadLink.click();\n    }\n\n}\n","import {\n    EventDispatcher,\n    MOUSE,\n    Quaternion,\n    Spherical,\n    TOUCH,\n    Vector2,\n    Vector3,\n    Plane,\n    Ray,\n    MathUtils\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nclass OrbitControls extends EventDispatcher {\n\n    constructor( object, domElement ) {\n\n        super();\n\n        this.object = object;\n        this.domElement = domElement;\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n        // Set to false to disable this control\n        this.enabled = true;\n\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new Vector3();\n\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0;\n        this.maxDistance = Infinity;\n\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0; // radians\n        this.maxPolarAngle = Math.PI; // radians\n\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n        this.minAzimuthAngle = - Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true;\n        this.zoomSpeed = 1.0;\n\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n\n        // Set to false to disable panning\n        this.enablePan = true;\n        this.panSpeed = 1.0;\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n        this.zoomToCursor = false;\n\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = false;\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n        // The four arrow keys\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\n\n        // Mouse buttons\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n        // Touch fingers\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n\n        //\n        // public methods\n        //\n\n        this.getPolarAngle = function() {\n\n            return spherical.phi;\n\n        };\n\n        this.getAzimuthalAngle = function() {\n\n            return spherical.theta;\n\n        };\n\n        this.getDistance = function() {\n\n            return this.object.position.distanceTo( this.target );\n\n        };\n\n        this.listenToKeyEvents = function( domElement ) {\n\n            domElement.addEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = domElement;\n\n        };\n\n        this.stopListenToKeyEvents = function() {\n\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = null;\n\n        };\n\n        this.saveState = function() {\n\n            scope.target0.copy( scope.target );\n            scope.position0.copy( scope.object.position );\n            scope.zoom0 = scope.object.zoom;\n\n        };\n\n        this.reset = function() {\n\n            scope.target.copy( scope.target0 );\n            scope.object.position.copy( scope.position0 );\n            scope.object.zoom = scope.zoom0;\n\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent( _changeEvent );\n\n            scope.update();\n\n            state = STATE.NONE;\n\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        this.update = function() {\n\n            const offset = new Vector3();\n\n            // so camera.up is the orbit axis\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n            const quatInverse = quat.clone().invert();\n\n            const lastPosition = new Vector3();\n            const lastQuaternion = new Quaternion();\n            const lastTargetPosition = new Vector3();\n\n            const twoPI = 2 * Math.PI;\n\n            return function update() {\n\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n                quatInverse.copy(quat).invert();\n\n                const position = scope.object.position;\n\n                offset.copy( position ).sub( scope.target );\n\n                // rotate offset to \"y-axis-is-up\" space\n                offset.applyQuaternion( quat );\n\n                // angle from z-axis around y-axis\n                spherical.setFromVector3( offset );\n\n                if ( scope.autoRotate && state === STATE.NONE ) {\n\n                    rotateLeft( getAutoRotationAngle() );\n\n                }\n\n                if ( scope.enableDamping ) {\n\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n                } else {\n\n                    spherical.theta += sphericalDelta.theta;\n                    spherical.phi += sphericalDelta.phi;\n\n                }\n\n                // restrict theta to be between desired limits\n\n                let min = scope.minAzimuthAngle;\n                let max = scope.maxAzimuthAngle;\n\n                if ( isFinite( min ) && isFinite( max ) ) {\n\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n                    if ( min <= max ) {\n\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n                    } else {\n\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n                            Math.max( min, spherical.theta ) :\n                            Math.min( max, spherical.theta );\n\n                    }\n\n                }\n\n                // restrict phi to be between desired limits\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n                spherical.makeSafe();\n\n\n                // move target to panned location\n\n                if ( scope.enableDamping === true ) {\n\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n                } else {\n\n                    scope.target.add( panOffset );\n\n                }\n\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n                // we adjust zoom later in these cases\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\n\n                    spherical.radius = clampDistance( spherical.radius );\n\n                } else {\n\n                    spherical.radius = clampDistance( spherical.radius * scale );\n\n                }\n\n\n                offset.setFromSpherical( spherical );\n\n                // rotate offset back to \"camera-up-vector-is-up\" space\n                offset.applyQuaternion( quatInverse );\n\n                position.copy( scope.target ).add( offset );\n\n                scope.object.lookAt( scope.target );\n\n                if ( scope.enableDamping === true ) {\n\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n                } else {\n\n                    sphericalDelta.set( 0, 0, 0 );\n\n                    panOffset.set( 0, 0, 0 );\n\n                }\n\n                // adjust camera position\n                let zoomChanged = false;\n                if ( scope.zoomToCursor && performCursorZoom ) {\n\n                    let newRadius = null;\n                    if ( scope.object.isPerspectiveCamera ) {\n\n                        // move the camera down the pointer ray\n                        // this method avoids floating point error\n                        const prevRadius = offset.length();\n                        newRadius = clampDistance( prevRadius * scale );\n\n                        const radiusDelta = prevRadius - newRadius;\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\n                        scope.object.updateMatrixWorld();\n\n                    } else if ( scope.object.isOrthographicCamera ) {\n\n                        // adjust the ortho camera position based on zoom changes\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseBefore.unproject( scope.object );\n\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                        scope.object.updateProjectionMatrix();\n                        zoomChanged = true;\n\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseAfter.unproject( scope.object );\n\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\n                        scope.object.updateMatrixWorld();\n\n                        newRadius = offset.length();\n\n                    } else {\n\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n                        scope.zoomToCursor = false;\n\n                    }\n\n                    // handle the placement of the target\n                    if ( newRadius !== null ) {\n\n                        if ( this.screenSpacePanning ) {\n\n                            // position the orbit target in front of the new camera position\n                            scope.target.set( 0, 0, - 1 )\n                                .transformDirection( scope.object.matrix )\n                                .multiplyScalar( newRadius )\n                                .add( scope.object.position );\n\n                        } else {\n\n                            // get the ray and translation plane to compute target\n                            _ray.origin.copy( scope.object.position );\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\n\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                            // extremely large values\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\n\n                                object.lookAt( scope.target );\n\n                            } else {\n\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\n                                _ray.intersectPlane( _plane, scope.target );\n\n                            }\n\n                        }\n\n                    }\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                    scope.object.updateProjectionMatrix();\n                    zoomChanged = true;\n\n                }\n\n                scale = 1;\n                performCursorZoom = false;\n\n                // update condition is:\n                // min(camera displacement, camera rotation in radians)^2 > EPS\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n                if ( zoomChanged ||\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\n\n                    scope.dispatchEvent( _changeEvent );\n\n                    lastPosition.copy( scope.object.position );\n                    lastQuaternion.copy( scope.object.quaternion );\n                    lastTargetPosition.copy( scope.target );\n\n                    zoomChanged = false;\n\n                    return true;\n\n                }\n\n                return false;\n\n            };\n\n        }();\n\n        this.dispose = function() {\n\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n            if ( scope._domElementKeyEvents !== null ) {\n\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n                scope._domElementKeyEvents = null;\n\n            }\n\n        };\n\n        //\n        // internals\n        //\n\n        const scope = this;\n\n        const STATE = {\n            NONE: - 1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_PAN: 4,\n            TOUCH_DOLLY_PAN: 5,\n            TOUCH_DOLLY_ROTATE: 6\n        };\n\n        let state = STATE.NONE;\n\n        const EPS = 0.000001;\n\n        // current position in spherical coordinates\n        const spherical = new Spherical();\n        const sphericalDelta = new Spherical();\n\n        let scale = 1;\n        const panOffset = new Vector3();\n\n        const rotateStart = new Vector2();\n        const rotateEnd = new Vector2();\n        const rotateDelta = new Vector2();\n\n        const panStart = new Vector2();\n        const panEnd = new Vector2();\n        const panDelta = new Vector2();\n\n        const dollyStart = new Vector2();\n        const dollyEnd = new Vector2();\n        const dollyDelta = new Vector2();\n\n        const dollyDirection = new Vector3();\n        const mouse = new Vector2();\n        let performCursorZoom = false;\n\n        const pointers = [];\n        const pointerPositions = {};\n\n        function getAutoRotationAngle() {\n\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n        }\n\n        function getZoomScale() {\n\n            return Math.pow( 0.95, scope.zoomSpeed );\n\n        }\n\n        function rotateLeft( angle ) {\n\n            sphericalDelta.theta -= angle;\n\n        }\n\n        function rotateUp( angle ) {\n\n            sphericalDelta.phi -= angle;\n\n        }\n\n        const panLeft = function() {\n\n            const v = new Vector3();\n\n            return function panLeft( distance, objectMatrix ) {\n\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n                v.multiplyScalar( - distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        const panUp = function() {\n\n            const v = new Vector3();\n\n            return function panUp( distance, objectMatrix ) {\n\n                if ( scope.screenSpacePanning === true ) {\n\n                    v.setFromMatrixColumn( objectMatrix, 1 );\n\n                } else {\n\n                    v.setFromMatrixColumn( objectMatrix, 0 );\n                    v.crossVectors( scope.object.up, v );\n\n                }\n\n                v.multiplyScalar( distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        const pan = function() {\n\n            const offset = new Vector3();\n\n            return function pan( deltaX, deltaY ) {\n\n                const element = scope.domElement;\n\n                if ( scope.object.isPerspectiveCamera ) {\n\n                    // perspective\n                    const position = scope.object.position;\n                    offset.copy( position ).sub( scope.target );\n                    let targetDistance = offset.length();\n\n                    // half of the fov is center to top of screen\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n                    // we use only clientHeight here so aspect ratio does not distort speed\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    // orthographic\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\n                                      element.clientHeight, scope.object.matrix );\n\n                } else {\n\n                    // camera neither orthographic nor perspective\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n                    scope.enablePan = false;\n\n                }\n\n            };\n\n        }();\n\n        function dollyOut( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale /= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function dollyIn( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale *= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function updateMouseParameters( event ) {\n\n            if ( ! scope.zoomToCursor ) {\n\n                return;\n\n            }\n\n            performCursorZoom = true;\n\n            const rect = scope.domElement.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const w = rect.width;\n            const h = rect.height;\n\n            mouse.x = ( x / w ) * 2 - 1;\n            mouse.y = - ( y / h ) * 2 + 1;\n\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\n\n        }\n\n        function clampDistance( dist ) {\n\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\n\n        }\n\n        //\n        // event callbacks - update the object state\n        //\n\n        function handleMouseDownRotate( event ) {\n\n            rotateStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownDolly( event ) {\n\n            updateMouseParameters( event );\n            dollyStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownPan( event ) {\n\n            panStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseMoveRotate( event ) {\n\n            rotateEnd.set( event.clientX, event.clientY );\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMoveDolly( event ) {\n\n            dollyEnd.set( event.clientX, event.clientY );\n\n            dollyDelta.subVectors( dollyEnd, dollyStart );\n\n            if ( dollyDelta.y > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            } else if ( dollyDelta.y < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            }\n\n            dollyStart.copy( dollyEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMovePan( event ) {\n\n            panEnd.set( event.clientX, event.clientY );\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseWheel( event ) {\n\n            updateMouseParameters( event );\n\n            if ( event.deltaY < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            } else if ( event.deltaY > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            }\n\n            scope.update();\n\n        }\n\n        function handleKeyDown( event ) {\n\n            let needsUpdate = false;\n\n            switch ( event.code ) {\n\n                case scope.keys.UP:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.BOTTOM:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, - scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.LEFT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.RIGHT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( - scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n            }\n\n            if ( needsUpdate ) {\n\n                // prevent the browser from scrolling on cursor keys\n                event.preventDefault();\n\n                scope.update();\n\n            }\n\n\n        }\n\n        function handleTouchStartRotate() {\n\n            if ( pointers.length === 1 ) {\n\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                rotateStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartPan() {\n\n            if ( pointers.length === 1 ) {\n\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                panStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartDolly() {\n\n            const dx = pointers[0].pageX - pointers[1].pageX;\n            const dy = pointers[0].pageY - pointers[1].pageY;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyStart.set( 0, distance );\n\n        }\n\n        function handleTouchStartDollyPan() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enablePan ) handleTouchStartPan();\n\n        }\n\n        function handleTouchStartDollyRotate() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enableRotate ) handleTouchStartRotate();\n\n        }\n\n        function handleTouchMoveRotate( event ) {\n\n            if ( pointers.length == 1 ) {\n\n                rotateEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                rotateEnd.set( x, y );\n\n            }\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n        }\n\n        function handleTouchMovePan( event ) {\n\n            if ( pointers.length === 1 ) {\n\n                panEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                panEnd.set( x, y );\n\n            }\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n        }\n\n        function handleTouchMoveDolly( event ) {\n\n            const position = getSecondPointerPosition( event );\n\n            const dx = event.pageX - position.x;\n            const dy = event.pageY - position.y;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyEnd.set( 0, distance );\n\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n            dollyOut( dollyDelta.y );\n\n            dollyStart.copy( dollyEnd );\n\n        }\n\n        function handleTouchMoveDollyPan( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enablePan ) handleTouchMovePan( event );\n\n        }\n\n        function handleTouchMoveDollyRotate( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        function onPointerDown( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.setPointerCapture( event.pointerId );\n\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            //\n\n            addPointer( event );\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchStart( event );\n\n            } else {\n\n                onMouseDown( event );\n\n            }\n\n        }\n\n        function onPointerMove( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchMove( event );\n\n            } else {\n\n                onMouseMove( event );\n\n            }\n\n        }\n\n        function onPointerUp( event ) {\n\n            removePointer( event );\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.releasePointerCapture( event.pointerId );\n\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            scope.dispatchEvent( _endEvent );\n\n            state = STATE.NONE;\n\n        }\n\n        function onMouseDown( event ) {\n\n            let mouseAction;\n\n            switch ( event.button ) {\n\n                case 0:\n\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n\n                case 1:\n\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    break;\n\n                case 2:\n\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n\n                default:\n\n                    mouseAction = - 1;\n\n            }\n\n            switch ( mouseAction ) {\n\n                case MOUSE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseDownDolly( event );\n\n                    state = STATE.DOLLY;\n\n                    break;\n\n                case MOUSE.ROTATE:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    } else {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    }\n\n                    break;\n\n                case MOUSE.PAN:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    } else {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onMouseMove( event ) {\n\n            switch ( state ) {\n\n                case STATE.ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleMouseMoveRotate( event );\n\n                    break;\n\n                case STATE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseMoveDolly( event );\n\n                    break;\n\n                case STATE.PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleMouseMovePan( event );\n\n                    break;\n\n            }\n\n        }\n\n        function onMouseWheel( event ) {\n\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n            event.preventDefault();\n\n            scope.dispatchEvent( _startEvent );\n\n            handleMouseWheel( event );\n\n            scope.dispatchEvent( _endEvent );\n\n        }\n\n        function onKeyDown( event ) {\n\n            if ( scope.enabled === false || scope.enablePan === false ) return;\n\n            handleKeyDown( event );\n\n        }\n\n        function onTouchStart( event ) {\n\n            trackPointer( event );\n\n            switch ( pointers.length ) {\n\n                case 1:\n\n                    switch ( scope.touches.ONE ) {\n\n                        case TOUCH.ROTATE:\n\n                            if ( scope.enableRotate === false ) return;\n\n                            handleTouchStartRotate();\n\n                            state = STATE.TOUCH_ROTATE;\n\n                            break;\n\n                        case TOUCH.PAN:\n\n                            if ( scope.enablePan === false ) return;\n\n                            handleTouchStartPan();\n\n                            state = STATE.TOUCH_PAN;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                case 2:\n\n                    switch ( scope.touches.TWO ) {\n\n                        case TOUCH.DOLLY_PAN:\n\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                            handleTouchStartDollyPan();\n\n                            state = STATE.TOUCH_DOLLY_PAN;\n\n                            break;\n\n                        case TOUCH.DOLLY_ROTATE:\n\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                            handleTouchStartDollyRotate();\n\n                            state = STATE.TOUCH_DOLLY_ROTATE;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onTouchMove( event ) {\n\n            trackPointer( event );\n\n            switch ( state ) {\n\n                case STATE.TOUCH_ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleTouchMoveRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleTouchMovePan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_PAN:\n\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                    handleTouchMoveDollyPan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_ROTATE:\n\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                    handleTouchMoveDollyRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n        }\n\n        function onContextMenu( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            event.preventDefault();\n\n        }\n\n        function addPointer( event ) {\n\n            pointers.push( event );\n\n        }\n\n        function removePointer( event ) {\n\n            delete pointerPositions[event.pointerId];\n\n            for ( let i = 0; i < pointers.length; i ++ ) {\n\n                if ( pointers[i].pointerId == event.pointerId ) {\n\n                    pointers.splice( i, 1 );\n                    return;\n\n                }\n\n            }\n\n        }\n\n        function trackPointer( event ) {\n\n            let position = pointerPositions[event.pointerId];\n\n            if ( position === undefined ) {\n\n                position = new Vector2();\n                pointerPositions[event.pointerId] = position;\n\n            }\n\n            position.set( event.pageX, event.pageY );\n\n        }\n\n        function getSecondPointerPosition( event ) {\n\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\n\n            return pointerPositions[pointer.pointerId];\n\n        }\n\n        //\n\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n        // force an update at start\n\n        this.update();\n\n    }\n\n}\n\nexport { OrbitControls };\n","export class LoadingSpinner {\n\n    constructor(message, container) {\n        this.message = message || 'Loading...';\n        this.container = container || document.body;\n\n        this.spinnerDivContainer = document.createElement('div');\n        this.spinnerDiv = document.createElement('div');\n        this.messageDiv = document.createElement('div');\n        this.spinnerDivContainer.className = 'loaderContainer';\n        this.spinnerDiv.className = 'loader';\n        this.spinnerDivContainer.style.display = 'none';\n        this.messageDiv.className = 'message';\n        this.messageDiv.innerHTML = this.message;\n        this.spinnerDivContainer.appendChild(this.spinnerDiv);\n        this.spinnerDivContainer.appendChild(this.messageDiv);\n        this.container.appendChild(this.spinnerDivContainer);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .message {\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                padding-top:15px;\n                width: 180px;\n            }\n\n            .loaderContainer {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n            }\n\n            .loader {\n                width: 120px;        /* the size */\n                padding: 15px;       /* the border thickness */\n                background: #07e8d6; /* the color */\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n                margin-left: 30px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n        this.spinnerDivContainer.appendChild(style);\n    }\n\n    show() {\n        this.spinnerDivContainer.style.display = 'block';\n    }\n\n    hide() {\n        this.spinnerDivContainer.style.display = 'none';\n    }\n\n    setMessage(msg) {\n        this.messageDiv.innerHTML = msg;\n    }\n}\n","import * as THREE from 'three';\n\nexport class ArrowHelper extends THREE.Object3D {\n\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\n        super();\n\n        this.type = 'ArrowHelper';\n\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\n        lineGeometry.translate(0, length / 2.0, 0);\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\n        coneGeometry.translate(0, length, 0);\n\n        this.position.copy( origin );\n\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.line.matrixAutoUpdate = false;\n        this.add(this.line);\n\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.cone.matrixAutoUpdate = false;\n        this.add(this.cone);\n\n        this.setDirection(dir);\n    }\n\n    setDirection( dir ) {\n        if (dir.y > 0.99999) {\n            this.quaternion.set(0, 0, 0, 1);\n        } else if (dir.y < - 0.99999) {\n            this.quaternion.set(1, 0, 0, 0);\n        } else {\n            _axis.set(dir.z, 0, -dir.x).normalize();\n            const radians = Math.acos(dir.y);\n            this.quaternion.setFromAxisAngle(_axis, radians);\n        }\n    }\n\n    setColor( color ) {\n        this.line.material.color.set(color);\n        this.cone.material.color.set(color);\n    }\n\n    copy(source) {\n        super.copy(source, false);\n        this.line.copy(source.line);\n        this.cone.copy(source.cone);\n        return this;\n    }\n\n    dispose() {\n        this.line.geometry.dispose();\n        this.line.material.dispose();\n        this.cone.geometry.dispose();\n        this.cone.material.dispose();\n    }\n\n}\n","import * as THREE from 'three';\nimport { ArrowHelper } from './ArrowHelper.js';\n\nexport class SceneHelper {\n\n    constructor(scene) {\n        this.scene = scene;\n        this.splatRenderTarget = null;\n        this.renderTargetCopyMaterial = null;\n        this.renderTargetCopyQuad = null;\n        this.renderTargetCopyCamera = null;\n        this.meshCursor = null;\n        this.focusMarker = null;\n        this.controlPlane = null;\n    }\n\n    updateSplatRenderTargetForRenderDimensions(width, height) {\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: true,\n\n        });\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n    }\n\n    setupRenderTargetCopyObjects() {\n        const uniforms = {\n            'sourceColorTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sourceDepthTexture': {\n                'type': 't',\n                'value': null\n            },\n        };\n        this.renderTargetCopyMaterial = new THREE.ShaderMaterial({\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n            fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            `,\n            uniforms: uniforms,\n            depthWrite: false,\n            depthTest: false,\n            transparent: true,\n            blending: THREE.CustomBlending,\n            blendSrc: THREE.SrcAlphaFactor,\n            blendSrcAlpha: THREE.SrcAlphaFactor,\n            blendDst: THREE.OneMinusSrcAlphaFactor,\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\n        });\n        this.renderTargetCopyMaterial.extensions.fragDepth = true;\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), this.renderTargetCopyMaterial);\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    }\n\n    setupMeshCursor() {\n        if (!this.meshCursor) {\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\n\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            downArrow.rotation.set(0, 0, Math.PI);\n            downArrow.position.set(0, 1, 0);\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            upArrow.position.set(0, -1, 0);\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\n            leftArrow.position.set(1, 0, 0);\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\n            rightArrow.position.set(-1, 0, 0);\n\n            this.meshCursor = new THREE.Object3D();\n            this.meshCursor.add(downArrow);\n            this.meshCursor.add(upArrow);\n            this.meshCursor.add(leftArrow);\n            this.meshCursor.add(rightArrow);\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\n            this.scene.add(this.meshCursor);\n            this.meshCursor.visible = false;\n        }\n    }\n\n    destroyMeshCursor() {\n        if (this.meshCursor) {\n            this.meshCursor.children.forEach((child) => {\n                child.geometry.dispose();\n                child.material.dispose();\n            });\n            this.scene.remove(this.meshCursor);\n            this.meshCursor = null;\n        }\n    }\n\n    setMeshCursorVisibility(visible) {\n        this.meshCursor.visible = visible;\n    }\n\n    setMeshCursorPosition(position) {\n        this.meshCursor.position.copy(position);\n    }\n\n    positionAndOrientMeshCursor(position, camera) {\n        this.meshCursor.position.copy(position);\n        this.meshCursor.up.copy(camera.up);\n        this.meshCursor.lookAt(camera.position);\n    }\n\n    setupFocusMarker() {\n        if (!this.focusMarker) {\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\n            focusMarkerMaterial.depthTest = false;\n            focusMarkerMaterial.depthWrite = false;\n            focusMarkerMaterial.transparent = true;\n            const sphereMesh = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\n            this.focusMarker = sphereMesh;\n        }\n    }\n\n    updateFocusMarker = function() {\n\n        const tempPosition = new THREE.Vector3();\n        const tempMatrix = new THREE.Matrix4();\n\n        return function(position, camera, viewport) {\n            tempMatrix.copy(camera.matrixWorld).invert();\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\n            tempPosition.normalize().multiplyScalar(10);\n            tempPosition.applyMatrix4(camera.matrixWorld);\n            this.focusMarker.position.copy(tempPosition);\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\n            this.focusMarker.material.uniformsNeedUpdate = true;\n        };\n\n    }();\n\n    setFocusMarkerVisibility(visible) {\n        this.focusMarker.visible = visible;\n    }\n\n    setFocusMarkerOpacity(opacity) {\n        this.focusMarker.material.uniforms.opacity.value = opacity;\n        this.focusMarker.material.uniformsNeedUpdate = true;\n    }\n\n    getFocusMarkerOpacity() {\n        return this.focusMarker.material.uniforms.opacity.value;\n    }\n\n    setupControlPlane() {\n        const planeGeometry = new THREE.PlaneGeometry(1, 1);\n        planeGeometry.rotateX(-Math.PI / 2);\n        const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\n        planeMaterial.transparent = true;\n        planeMaterial.opacity = 0.6;\n        planeMaterial.depthTest = false;\n        planeMaterial.depthWrite = false;\n        planeMaterial.side = THREE.DoubleSide;\n        const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n\n        const arrowDir = new THREE.Vector3(0, 1, 0);\n        arrowDir.normalize();\n        const arrowOrigin = new THREE.Vector3(0, 0, 0);\n        const arrowLength = 0.5;\n        const arrowRadius = 0.01;\n        const arrowColor = 0x00dd00;\n        const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\n\n        this.controlPlane = new THREE.Object3D();\n        this.controlPlane.add(planeMesh);\n        this.controlPlane.add(arrowHelper);\n    }\n\n    setControlPlaneVisibility(visible) {\n        this.controlPlane.visible = visible;\n    }\n\n    positionAndOrientControlPlane = function() {\n\n        const tempQuaternion = new THREE.Quaternion();\n        const defaultUp = new THREE.Vector3(0, 1, 0);\n\n        return function(position, up) {\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\n            this.controlPlane.position.copy(position);\n            this.controlPlane.quaternion.copy(tempQuaternion);\n        };\n\n    }();\n\n    addDebugMeshes() {\n        this.debugRoot = this.createDebugMeshes();\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n        this.scene.add(this.debugRoot);\n        this.scene.add(this.secondaryDebugRoot);\n    }\n\n    createDebugMeshes(renderOrder) {\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n        const debugMeshRoot = new THREE.Object3D();\n\n        const createMesh = (color, position) => {\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\n            sphereMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(sphereMesh);\n            sphereMesh.position.fromArray(position);\n        };\n\n        createMesh(0xff0000, [-50, 0, 0]);\n        createMesh(0xff0000, [50, 0, 0]);\n        createMesh(0x00ff00, [0, 0, -50]);\n        createMesh(0x00ff00, [0, 0, 50]);\n        createMesh(0xffaa00, [5, 0, 5]);\n\n        return debugMeshRoot;\n    }\n\n    createSecondaryDebugMeshes(renderOrder) {\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n        const debugMeshRoot = new THREE.Object3D();\n\n        let boxColor = 0xBBBBBB;\n        const createMesh = (position) => {\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\n            boxMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(boxMesh);\n            boxMesh.position.fromArray(position);\n        };\n\n        let separation = 10;\n        createMesh([-separation, 0, -separation]);\n        createMesh([-separation, 0, separation]);\n        createMesh([separation, 0, -separation]);\n        createMesh([separation, 0, separation]);\n\n        return debugMeshRoot;\n    }\n\n    static buildDebugMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: false,\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.FrontSide\n        });\n        material.extensions.fragDepth = true;\n\n        return material;\n    }\n\n    static buildFocusMarkerMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n            'realFocusPosition': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'opacity': {\n                'value': 0.0\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            depthTest: false,\n            depthWrite: false,\n            side: THREE.FrontSide\n        });\n\n        return material;\n    }\n}\n","import * as THREE from 'three';\n\nconst VectorRight = new THREE.Vector3(1, 0, 0);\nconst VectorUp = new THREE.Vector3(0, 1, 0);\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\n\nexport class Ray {\n\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\n        this.origin = new THREE.Vector3();\n        this.direction = new THREE.Vector3();\n        this.setParameters(origin, direction);\n    }\n\n    setParameters(origin, direction) {\n        this.origin.copy(origin);\n        this.direction.copy(direction).normalize();\n    }\n\n    boxContainsPoint(box, point, epsilon) {\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\n    }\n\n    intersectBox = function() {\n\n        const planeIntersectionPoint = new THREE.Vector3();\n        const planeIntersectionPointArray = [];\n        const originArray = [];\n        const directionArray = [];\n\n        return function(box, outHit) {\n\n            originArray[0] = this.origin.x;\n            originArray[1] = this.origin.y;\n            originArray[2] = this.origin.z;\n            directionArray[0] = this.direction.x;\n            directionArray[1] = this.direction.y;\n            directionArray[2] = this.direction.z;\n\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\n                if (outHit) {\n                    outHit.origin.copy(this.origin);\n                    outHit.normal.set(0, 0, 0);\n                    outHit.distance = -1;\n                }\n                return true;\n            }\n\n            for (let i = 0; i < 3; i++) {\n                if (directionArray[i] == 0.0) continue;\n\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\n                let multiplier = -Math.sign(directionArray[i]);\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\n\n                if (toSide * multiplier < 0) {\n                    const idx1 = (i + 1) % 3;\n                    const idx2 = (i + 2) % 3;\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\n                                               planeIntersectionPointArray[idx2],\n                                               planeIntersectionPointArray[idx1]);\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\n                        if (outHit) {\n                            outHit.origin.copy(planeIntersectionPoint);\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\n                        }\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n    }();\n\n    intersectSphere = function() {\n\n        const toSphereCenterVec = new THREE.Vector3();\n\n        return function(center, radius, outHit) {\n            toSphereCenterVec.copy(center).sub(this.origin);\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\n            const radiusSq = radius * radius;\n\n            if (diffSq > radiusSq) return false;\n\n            const thc = Math.sqrt(radiusSq - diffSq);\n            const t0 = toClosestApproach - thc;\n            const t1 = toClosestApproach + thc;\n\n            if (t1 < 0) return false;\n            let t = t0 < 0 ? t1 : t0;\n\n            if (outHit) {\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\n                outHit.distance = t;\n            }\n            return true;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nexport class Hit {\n\n    constructor() {\n        this.origin = new THREE.Vector3();\n        this.normal = new THREE.Vector3();\n        this.distance = 0;\n    }\n\n    set(origin, normal, distance) {\n        this.origin.copy(origin);\n        this.normal.copy(normal);\n        this.distance = distance;\n    }\n\n    clone() {\n        const hitClone = new Hit();\n        hitClone.origin.copy(this.origin);\n        hitClone.normal.copy(this.normal);\n        hitClone.distance = this.distance;\n        return hitClone;\n    }\n\n}\n","import * as THREE from 'three';\nimport { Ray } from './Ray.js';\nimport { Hit } from './Hit.js';\n\nexport class Raycaster {\n\n    constructor(origin, direction) {\n        this.ray = new Ray(origin, direction);\n    }\n\n    setFromCameraAndScreenPosition = function() {\n\n        const ndcCoords = new THREE.Vector2();\n\n        return function(camera, screenPosition, screenDimensions) {\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\n            if (camera.isPerspectiveCamera) {\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\n                this.camera = camera;\n            } else if (camera.isOrthographicCamera) {\n                this.ray.origin.set(screenPosition.x, screenPosition.y,\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n                this.camera = camera;\n            } else {\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\n            }\n        };\n\n    }();\n\n    intersectSplatMesh = function() {\n\n        const toLocal = new THREE.Matrix4();\n        const fromLocal = new THREE.Matrix4();\n        const localRay = new Ray();\n\n        return function(splatMesh, outHits = []) {\n            fromLocal.copy(splatMesh.matrixWorld);\n            toLocal.copy(fromLocal).invert();\n            localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\n            localRay.direction.copy(this.ray.direction).transformDirection(toLocal);\n\n            const splatTree = splatMesh.getSplatTree();\n            if (splatTree.rootNode) {\n                this.castRayAtSplatTreeNode(localRay, splatTree, splatTree.rootNode, outHits);\n            }\n            outHits.sort((a, b) => {\n                if (a.distance > b.distance) return 1;\n                else return -1;\n            });\n            outHits.forEach((hit) => {\n                hit.origin.applyMatrix4(fromLocal);\n                hit.normal.transformDirection(fromLocal);\n            });\n            return outHits;\n        };\n\n    }();\n\n    castRayAtSplatTreeNode = function() {\n\n        const tempCenter = new THREE.Vector3();\n        const tempScale = new THREE.Vector3();\n        const tempRotation = new THREE.Quaternion();\n        const tempHit = new Hit();\n        const scaleEpsilon = 0.0000001;\n\n        // Used for raycasting against splat ellipsoid\n        /*\n        const origin = new THREE.Vector3(0, 0, 0);\n        const tempRotationMatrix = new THREE.Matrix4();\n        const tempScaleMatrix = new THREE.Matrix4();\n        const toSphereSpace = new THREE.Matrix4();\n        const fromSphereSpace = new THREE.Matrix4();\n        const tempRay = new Ray();\n        */\n\n        return function(ray, splatTree, node, outHits = []) {\n            if (!ray.intersectBox(node.boundingBox)) {\n                return;\n            }\n            if (node.data.indexes && node.data.indexes.length > 0) {\n                for (let i = 0; i < node.data.indexes.length; i++) {\n                    const splatIndex = node.data.indexes[i];\n                    splatTree.splatBuffer.getCenter(splatIndex, tempCenter);\n                    splatTree.splatBuffer.getRotation(splatIndex, tempRotation);\n                    splatTree.splatBuffer.getScale(splatIndex, tempScale);\n\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon || tempScale.z <= scaleEpsilon) {\n                        continue;\n                    }\n\n                    // Simple approximated sphere intersection\n                    const radius = (tempScale.x + tempScale.y + tempScale.z) / 3;\n                    if (ray.intersectSphere(tempCenter, radius, tempHit)) {\n                        outHits.push(tempHit.clone());\n                    }\n\n                    // Raycast against actual splat ellipsoid ... doesn't actually work as well\n                    // as the approximated sphere approach\n                    /*\n                    tempScaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\n                    tempRotationMatrix.makeRotationFromQuaternion(tempRotation);\n                    fromSphereSpace.copy(tempScaleMatrix).premultiply(tempRotationMatrix);\n                    toSphereSpace.copy(fromSphereSpace).invert();\n                    tempRay.origin.copy(this.ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\n                    tempRay.direction.copy(this.ray.direction).transformDirection(toSphereSpace).normalize();\n                    if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\n                        const hitClone = tempHit.clone();\n                        hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\n                        outHits.push(hitClone);\n                    }\n                    */\n\n                }\n             }\n            if (node.children && node.children.length > 0) {\n                for (let child of node.children) {\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\n                }\n            }\n            return outHits;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nlet idGen = 0;\n\nexport class SplatTreeNode {\n\n    constructor(min, max, depth, id) {\n        this.min = new THREE.Vector3().copy(min);\n        this.max = new THREE.Vector3().copy(max);\n        this.boundingBox = new THREE.Box3(this.min, this.max);\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\n        this.depth = depth;\n        this.children = [];\n        this.data = null;\n        this.id = id || idGen++;\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatTreeNode } from './SplatTreeNode.js';\n\nexport class SplatTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.splatBuffer = null;\n        this.sceneDimensions = new THREE.Vector3();\n        this.sceneMin = new THREE.Vector3();\n        this.sceneMax = new THREE.Vector3();\n        this.rootNode = null;\n        this.addedIndexes = {};\n        this.nodesWithIndexes = [];\n    }\n\n    processSplatBuffer(splatBuffer, filterFunc = () => true) {\n        this.splatBuffer = splatBuffer;\n        this.addedIndexes = {};\n        this.nodesWithIndexes = [];\n        const splatCount = splatBuffer.getSplatCount();\n\n        const center = new THREE.Vector3();\n        for (let i = 0; i < splatCount; i++) {\n            if (filterFunc(i)) {\n                splatBuffer.getCenter(i, center);\n                if (i === 0 || center.x < this.sceneMin.x) this.sceneMin.x = center.x;\n                if (i === 0 || center.x > this.sceneMax.x) this.sceneMax.x = center.x;\n                if (i === 0 || center.y < this.sceneMin.y) this.sceneMin.y = center.y;\n                if (i === 0 || center.y > this.sceneMax.y) this.sceneMax.y = center.y;\n                if (i === 0 || center.z < this.sceneMin.z) this.sceneMin.z = center.z;\n                if (i === 0 || center.z > this.sceneMax.z) this.sceneMax.z = center.z;\n            }\n        }\n\n        this.sceneDimensions.copy(this.sceneMin).sub(this.sceneMin);\n\n        const indexes = [];\n        for (let i = 0; i < splatCount; i ++) {\n            if (filterFunc(i)) {\n                indexes.push(i);\n            }\n        }\n        this.rootNode = new SplatTreeNode(this.sceneMin, this.sceneMax, 0);\n        this.rootNode.data = {\n            'indexes': indexes\n        };\n        this.processNode(this.rootNode, splatBuffer);\n    }\n\n    processNode(node, splatBuffer) {\n        const splatCount = node.data.indexes.length;\n\n        if (splatCount < this.maxCentersPerNode || node.depth > this.maxDepth) {\n            const newIndexes = [];\n            for (let i = 0; i < node.data.indexes.length; i++) {\n                if (!this.addedIndexes[node.data.indexes[i]]) {\n                    newIndexes.push(node.data.indexes[i]);\n                    this.addedIndexes[node.data.indexes[i]] = true;\n                }\n            }\n            node.data.indexes = newIndexes;\n            this.nodesWithIndexes.push(node);\n            return;\n        }\n\n        const nodeDimensions = new THREE.Vector3().copy(node.max).sub(node.min);\n        const halfDimensions = new THREE.Vector3().copy(nodeDimensions).multiplyScalar(0.5);\n\n        const nodeCenter = new THREE.Vector3().copy(node.min).add(halfDimensions);\n\n        const childrenBounds = [\n            // top section, clockwise from upper-left (looking from above, +Y)\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x,\n                                             nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z ),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\n\n            // bottom section, clockwise from lower-left (looking from above, +Y)\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x,\n                                             nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\n        ];\n\n        const splatCounts = [];\n        const baseIndexes = [];\n        for (let i = 0; i < childrenBounds.length; i++) {\n            splatCounts[i] = 0;\n            baseIndexes[i] = [];\n        }\n\n        const center = new THREE.Vector3();\n        for (let i = 0; i < splatCount; i++) {\n            const splatIndex = node.data.indexes[i];\n            splatBuffer.getCenter(splatIndex, center);\n            for (let j = 0; j < childrenBounds.length; j++) {\n                if (childrenBounds[j].containsPoint(center)) {\n                    splatCounts[j]++;\n                    baseIndexes[j].push(splatIndex);\n                }\n            }\n        }\n\n        for (let i = 0; i < childrenBounds.length; i++) {\n            const childNode = new SplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\n            childNode.data = {\n                'indexes': baseIndexes[i]\n            };\n            node.children.push(childNode);\n        }\n\n        node.data = {};\n        for (let child of node.children) {\n            this.processNode(child, splatBuffer);\n        }\n    }\n\n\n    countLeaves() {\n\n        let leafCount = 0;\n        this.visitLeaves(() => {\n            leafCount++;\n        });\n\n        return leafCount;\n    }\n\n    visitLeaves(visitFunc) {\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        return visitLeavesFromNode(this.rootNode, visitFunc);\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatTree } from './splattree/SplatTree.js';\nimport { uintEncodedFloat, rgbaToInteger } from './Util.js';\n\nexport class SplatMesh extends THREE.Mesh {\n\n    static buildMesh(splatBuffer, renderer, splatAlphaRemovalThreshold = 1, halfPrecisionCovariancesOnGPU = false,\n                     devicePixelRatio = 1, enableDistancesComputationOnGPU = true) {\n        const geometry = SplatMesh.buildGeomtery(splatBuffer);\n        const material = SplatMesh.buildMaterial();\n        return new SplatMesh(splatBuffer, geometry, material, renderer, splatAlphaRemovalThreshold,\n                             halfPrecisionCovariancesOnGPU, devicePixelRatio, enableDistancesComputationOnGPU);\n    }\n\n    constructor(splatBuffer, geometry, material, renderer, splatAlphaRemovalThreshold = 1,\n                halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1, enableDistancesComputationOnGPU = true) {\n        super(geometry, material);\n        this.splatBuffer = splatBuffer;\n        this.geometry = geometry;\n        this.material = material;\n        this.renderer = renderer;\n        this.splatTree = null;\n        this.splatDataTextures = null;\n        this.splatAlphaRemovalThreshold = splatAlphaRemovalThreshold;\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\n        this.devicePixelRatio = devicePixelRatio;\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\n        this.buildSplatTree();\n\n        if (this.enableDistancesComputationOnGPU) {\n            this.distancesTransformFeedback = {\n                'id': null,\n                'program': null,\n                'centersBuffer': null,\n                'outDistancesBuffer': null,\n                'centersLoc': -1,\n                'viewProjLoc': -1,\n            };\n            this.setupDistancesTransformFeedback();\n        }\n\n        this.resetLocalSplatDataAndTexturesFromSplatBuffer();\n    }\n\n    static buildMaterial() {\n\n        const vertexShaderSource = `\n            precision highp float;\n            #include <common>\n\n            attribute uint splatIndex;\n\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D centersColorsTexture;\n            uniform vec2 focal;\n            uniform vec2 viewport;\n            uniform vec2 basisViewport;\n            uniform vec2 covariancesTextureSize;\n            uniform vec2 centersColorsTextureSize;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\n            vec4 uintToRGBAVec (uint u) {\n               uvec4 urgba = mask4 & u;\n               urgba = urgba >> shift4;\n               vec4 rgba = vec4(urgba) * encodeNorm4;\n               return rgba;\n            }\n\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            void main () {\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));\n                vColor = uintToRGBAVec(sampledCenterColor.r);\n\n                vPosition = position.xy * 2.0;\n\n                vec4 viewCenter = modelViewMatrix * vec4(splatCenter, 1.0);\n                vec4 clipCenter = projectionMatrix * viewCenter;\n\n                vec2 sampledCovarianceA = texture(covariancesTexture, getDataUV(3, 0, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceB = texture(covariancesTexture, getDataUV(3, 1, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceC = texture(covariancesTexture, getDataUV(3, 2, covariancesTextureSize)).rg;\n\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rg, sampledCovarianceB.r);\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceB.g, sampledCovarianceC.rg);\n\n                // Compute the 2D covariance matrix from the upper-right portion of the 3D covariance matrix\n                mat3 Vrk = mat3(\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n                );\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\n                mat3 J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                    0., 0., 0.\n                );\n                mat3 W = transpose(mat3(modelViewMatrix));\n                mat3 T = W * J;\n                mat3 cov2Dm = transpose(T) * Vrk * T;\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n                // need cov2Dm[1][0] because it is a symetric matrix.\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n                // so that we can determine the 2D basis for the splat. This is done using the method described\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n                //\n                // This is a different approach than in the original work at INRIA. In that work they compute the\n                // max extents of the 2D covariance matrix in screen space to form an axis aligned bounding rectangle\n                // which forms the geometry that is actually rasterized. They then use the inverse 2D covariance\n                // matrix (called 'conic') to determine fragment opacity.\n                float a = cov2Dv.x;\n                float d = cov2Dv.z;\n                float b = cov2Dv.y;\n                float D = a * d - b * b;\n                float trace = a + d;\n                float traceOver2 = 0.5 * trace;\n                float term2 = sqrt(trace * trace / 4.0 - D);\n                float eigenValue1 = traceOver2 + term2;\n                float eigenValue2 = max(traceOver2 - term2, 0.00); // prevent negative eigen value\n\n                const float maxSplatSize = 1024.0;\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n                // since the eigen vectors are orthogonal, we derive the second one from the first\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n                vec2 basisVector1 = eigenVector1 * min(sqrt(2.0 * eigenValue1), maxSplatSize);\n                vec2 basisVector2 = eigenVector2 * min(sqrt(2.0 * eigenValue2), maxSplatSize);\n\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) * basisViewport;\n\n                gl_Position = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            }`;\n\n        const fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n\n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            void main () {\n                // compute the negative squared distance from the center of the splat to the\n                // current fragment in the splat's local space.\n                float A = -dot(vPosition, vPosition);\n                if (A < -4.0) discard;\n                vec3 color = vColor.rgb;\n                A = exp(A) * vColor.a;\n                gl_FragColor = vec4(color.rgb, A);\n            }`;\n\n        const uniforms = {\n            'covariancesTexture': {\n                'type': 't',\n                'value': null\n            },\n            'centersColorsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'focal': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'basisViewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'debugColor': {\n                'type': 'v3',\n                'value': new THREE.Color()\n            },\n            'covariancesTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'centersColorsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            alphaTest: 1.0,\n            blending: THREE.NormalBlending,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        return material;\n    }\n\n    static buildGeomtery(splatBuffer) {\n\n        const splatCount = splatBuffer.getSplatCount();\n\n        const baseGeometry = new THREE.BufferGeometry();\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n        const positionsArray = new Float32Array(4 * 3);\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\n        baseGeometry.setAttribute('position', positions);\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\n        positions.needsUpdate = true;\n\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n        const splatIndexArray = new Uint32Array(splatCount);\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\n        geometry.setAttribute('splatIndex', splatIndexes);\n\n        geometry.instanceCount = splatCount;\n\n        return geometry;\n    }\n\n    buildSplatTree() {\n\n        this.splatTree = new SplatTree(10, 500);\n        console.time('SplatTree build');\n        const splatColor = new THREE.Vector4();\n        this.splatTree.processSplatBuffer(this.splatBuffer, (splatIndex) => {\n            this.splatBuffer.getColor(splatIndex, splatColor);\n            return splatColor.w > this.splatAlphaRemovalThreshold;\n        });\n        console.timeEnd('SplatTree build');\n\n        let leavesWithVertices = 0;\n        let avgSplatCount = 0;\n        let maxSplatCount = 0;\n        let nodeCount = 0;\n\n        this.splatTree.visitLeaves((node) => {\n            const nodeSplatCount = node.data.indexes.length;\n            if (nodeSplatCount > 0) {\n                avgSplatCount += nodeSplatCount;\n                maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\n                nodeCount++;\n                leavesWithVertices++;\n            }\n        });\n        console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\n        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\n        avgSplatCount = avgSplatCount / nodeCount;\n        console.log(`Avg splat count per node: ${avgSplatCount}`);\n    }\n\n    getSplatTree() {\n        return this.splatTree;\n    }\n\n    resetLocalSplatDataAndTexturesFromSplatBuffer() {\n        this.updateLocalSplatDataFromSplatBuffer();\n        this.allocateAndStoreLocalSplatDataInTextures();\n        if (this.enableDistancesComputationOnGPU) {\n            this.updateCentersGPUBufferForDistancesComputation();\n        }\n    }\n\n    updateLocalSplatDataFromSplatBuffer() {\n        const splatCount = this.splatBuffer.getSplatCount();\n        this.covariances = new Float32Array(splatCount * 6);\n        this.colors = new Uint8Array(splatCount * 4);\n        this.centers = new Float32Array(splatCount * 3);\n        this.splatBuffer.fillCovarianceArray(this.covariances);\n        this.splatBuffer.fillCenterArray(this.centers);\n        this.splatBuffer.fillColorArray(this.colors);\n    }\n\n    allocateAndStoreLocalSplatDataInTextures() {\n        const COVARIANCES_ELEMENTS_PER_TEXEL = 2;\n        const CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\n        const splatCount = this.splatBuffer.getSplatCount();\n\n        const covariancesTextureSize = new THREE.Vector2(4096, 1024);\n        while (covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL < splatCount * 6) {\n            covariancesTextureSize.y *= 2;\n        }\n\n        const centersColorsTextureSize = new THREE.Vector2(4096, 1024);\n        while (centersColorsTextureSize.x * centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL < splatCount * 4) {\n            centersColorsTextureSize.y *= 2;\n        }\n\n        let covariancesTexture;\n        let paddedCovariances;\n        if (this.halfPrecisionCovariancesOnGPU) {\n            paddedCovariances = new Uint16Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n            for (let i = 0; i < this.covariances.length; i++) {\n                paddedCovariances[i] = THREE.DataUtils.toHalfFloat(this.covariances[i]);\n            }\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.HalfFloatType);\n        } else {\n            paddedCovariances = new Float32Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n            paddedCovariances.set(this.covariances);\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.FloatType);\n        }\n        covariancesTexture.needsUpdate = true;\n        this.material.uniforms.covariancesTexture.value = covariancesTexture;\n        this.material.uniforms.covariancesTextureSize.value.copy(covariancesTextureSize);\n\n        const paddedCenterColors = new Uint32Array(centersColorsTextureSize.x *\n                                                   centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\n        for (let c = 0; c < splatCount; c++) {\n            const colorsBase = c * 4;\n            const centersBase = c * 3;\n            const centerColorsBase = c * 4;\n            paddedCenterColors[centerColorsBase] = rgbaToInteger(this.colors[colorsBase], this.colors[colorsBase + 1],\n                                                                 this.colors[colorsBase + 2], this.colors[colorsBase + 3]);\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(this.centers[centersBase]);\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(this.centers[centersBase + 1]);\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(this.centers[centersBase + 2]);\n        }\n        const centersColorsTexture = new THREE.DataTexture(paddedCenterColors, centersColorsTextureSize.x,\n                                                           centersColorsTextureSize.y, THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n        centersColorsTexture.internalFormat = 'RGBA32UI';\n        centersColorsTexture.needsUpdate = true;\n        this.material.uniforms.centersColorsTexture.value = centersColorsTexture;\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColorsTextureSize);\n        this.material.uniformsNeedUpdate = true;\n\n        this.splatDataTextures = {\n            'covariances': {\n                'data': paddedCovariances,\n                'texture': covariancesTexture,\n                'size': covariancesTextureSize\n            },\n            'centerColors': {\n                'data': paddedCenterColors,\n                'texture': centersColorsTexture,\n                'size': centersColorsTextureSize\n            }\n        };\n    }\n\n    updateSplatDataToDataTextures() {\n        this.updateLocalCovarianceDataToDataTexture();\n        this.updateLocalCenterColorDataToDataTexture();\n    }\n\n    updateLocalCovarianceDataToDataTexture() {\n        this.splatDataTextures.covariances.data.set(this.covariances);\n        this.splatDataTextures.covariances.texture.needsUpdate = true;\n    }\n\n    updateLocalCenterColorDataToDataTexture() {\n        this.splatDataTextures.centerColors.data.set(this.centerColors);\n        this.splatDataTextures.centerColors.texture.needsUpdate = true;\n    }\n\n    updateIndexes(indexes, renderSplatCount) {\n        const geometry = this.geometry;\n\n        geometry.attributes.splatIndex.set(indexes);\n        geometry.attributes.splatIndex.needsUpdate = true;\n\n        geometry.instanceCount = renderSplatCount;\n    }\n\n    updateUniforms = function() {\n\n        const viewport = new THREE.Vector2();\n\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY) {\n            const splatCount = this.splatBuffer.getSplatCount();\n            if (splatCount > 0) {\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\n                             renderDimensions.y * this.devicePixelRatio);\n                this.material.uniforms.viewport.value.copy(viewport);\n                this.material.uniforms.basisViewport.value.set(2.0 / viewport.x, 2.0 / viewport.y);\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\n                this.material.uniformsNeedUpdate = true;\n            }\n        };\n\n    }();\n\n    getSplatDataTextures() {\n        return this.splatDataTextures;\n    }\n\n    getSplatCount() {\n        return this.splatBuffer.getSplatCount();\n    }\n\n    getCenters() {\n        return this.centers;\n    }\n\n    getColors() {\n        return this.colors;\n    }\n\n    getCovariances() {\n        return this.covariances;\n    }\n\n    setupDistancesTransformFeedback() {\n\n        const splatCount = this.getSplatCount();\n\n        const createShader = (gl, type, source) => {\n            const shader = gl.createShader(type);\n            if (!shader) {\n                console.error('Fatal error: gl could not create a shader object.');\n                return null;\n            }\n\n            gl.shaderSource(shader, source);\n            gl.compileShader(shader);\n\n            const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n            if (!compiled) {\n                let typeName = 'unknown';\n                if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\n                else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\n                const errors = gl.getShaderInfoLog(shader);\n                console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\n                gl.deleteShader(shader);\n                return null;\n            }\n\n            return shader;\n        };\n\n        const vsSource =\n           `#version 300 es\n            in ivec3 center;\n            uniform ivec3 viewProj;\n            flat out int distance;\n            void main(void) {\n                distance = center.x * viewProj.x + center.y * viewProj.y + center.z * viewProj.z; \n            }\n        `;\n\n        const fsSource =\n           `#version 300 es\n            precision lowp float;\n            out vec4 fragColor;\n            void main(){}\n        `;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n\n        this.distancesTransformFeedback.vao = gl.createVertexArray();\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        this.distancesTransformFeedback.program = gl.createProgram();\n        const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\n        const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\n        if (!vertexShader || !fragmentShader) {\n            throw new Error('Could not compile shaders for distances computation on GPU.');\n        }\n        gl.attachShader(this.distancesTransformFeedback.program, vertexShader);\n        gl.attachShader(this.distancesTransformFeedback.program, fragmentShader);\n        gl.transformFeedbackVaryings(this.distancesTransformFeedback.program, ['distance'], gl.SEPARATE_ATTRIBS);\n        gl.linkProgram(this.distancesTransformFeedback.program);\n\n        const linked = gl.getProgramParameter(this.distancesTransformFeedback.program, gl.LINK_STATUS);\n        if (!linked) {\n            const error = gl.getProgramInfoLog(program);\n            console.error('Fatal error: Failed to link program: ' + error);\n            gl.deleteProgram(this.distancesTransformFeedback.program);\n            gl.deleteShader(fragmentShader);\n            gl.deleteShader(vertexShader);\n            throw new Error('Could not link shaders for distances computation on GPU.');\n        }\n\n        gl.useProgram(this.distancesTransformFeedback.program);\n\n        this.distancesTransformFeedback.centersLoc = gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\n        this.distancesTransformFeedback.viewProjLoc = gl.getUniformLocation(this.distancesTransformFeedback.program, 'viewProj');\n\n        this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n        gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n        gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 3, gl.INT, 0, 0);\n\n        this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, splatCount * 4, gl.DYNAMIC_DRAW);\n\n        this.distancesTransformFeedback.id = gl.createTransformFeedback();\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n\n    }\n\n    getIntegerCenters(padFour) {\n        const splatCount = this.getSplatCount();\n        const floatCenters = new Float32Array(this.centers);\n        let intCenters;\n        let componentCount = padFour ? 4 : 3;\n        intCenters = new Int32Array(splatCount * componentCount);\n        for (let i = 0; i < splatCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\n            }\n            if (padFour) intCenters[i * componentCount + 3] = 1;\n        }\n        return intCenters;\n    }\n\n    getIntegerMatrixArray(matrix) {\n        const matrixElements = matrix.elements;\n        const intMatrixArray = [];\n        for (let i = 0; i < 16; i++) {\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\n        }\n        return intMatrixArray;\n    }\n\n    updateCentersGPUBufferForDistancesComputation() {\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        const intCenters = this.getIntegerCenters(false);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, intCenters, gl.STATIC_DRAW);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    computeDistancesOnGPU(viewProjMatrix, outComputedDistances) {\n\n        const iViewProjMatrix = this.getIntegerMatrixArray(viewProjMatrix);\n        const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\n\n        // console.time(\"gpu_compute_distances\");\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n        gl.useProgram(this.distancesTransformFeedback.program);\n\n        gl.enable(gl.RASTERIZER_DISCARD);\n\n        gl.uniform3i(this.distancesTransformFeedback.viewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n        gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n        gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 3, gl.INT, 0, 0);\n\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n        gl.beginTransformFeedback(gl.POINTS);\n        gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\n        gl.endTransformFeedback();\n\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n        gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        gl.disable(gl.RASTERIZER_DISCARD);\n\n        // console.timeEnd(\"gpu_compute_distances\");\n\n        if (currentProgram) gl.useProgram(currentProgram);\n        if (currentVao) gl.bindVertexArray(currentVao);\n\n    }\n}\n","export class Constants {\n\n    static DepthMapRange = 1 << 16;\n    static MemoryPageSize = 65536;\n    static BytesPerFloat = 4;\n    static BytesPerInt = 4;\n\n}\n","import SorterWasm from './sorter.wasm';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n\n    let wasmInstance;\n    let wasmMemory;\n    let splatCount;\n    let indexesToSortOffset;\n    let sortedIndexesOffset;\n    let precomputedDistancesOffset;\n    let mappedDistancesOffset;\n    let frequenciesOffset;\n    let centersOffset;\n    let viewProjOffset;\n    let countsZero;\n\n    let Constants;\n\n    function sort(splatSortCount, splatRenderCount, viewProj, usePrecomputedDistances) {\n        const sortStartTime = performance.now();\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\n        new Int32Array(wasmMemory, viewProjOffset, 16).set(viewProj);\n        new Uint32Array(wasmMemory, frequenciesOffset, Constants.DepthMapRange).set(countsZero);\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\n                                         mappedDistancesOffset, frequenciesOffset, viewProjOffset,\n                                         sortedIndexesOffset, Constants.DepthMapRange, splatSortCount,\n                                         splatRenderCount, splatCount, usePrecomputedDistances);\n        const sortEndTime = performance.now();\n\n        self.postMessage({\n            'sortDone': true,\n            'splatSortCount': splatSortCount,\n            'splatRenderCount': splatRenderCount,\n            'sortTime': sortEndTime - sortStartTime\n        });\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.centers) {\n            centers = e.data.centers;\n            new Int32Array(wasmMemory, centersOffset, splatCount * 4).set(new Int32Array(centers));\n            self.postMessage({\n                'sortSetupComplete': true,\n            });\n        } else if (e.data.sort) {\n            const renderCount = e.data.sort.splatRenderCount || 0;\n            const sortCount = e.data.sort.splatSortCount || 0;\n            sort(sortCount, renderCount, e.data.sort.viewProj, e.data.sort.usePrecomputedDistances);\n        } else if (e.data.init) {\n            // Yep, this is super hacky and gross :(\n            Constants = e.data.init.Constants;\n\n            splatCount = e.data.init.splatCount;\n\n            const CENTERS_BYTES_PER_ENTRY = Constants.BytesPerInt * 4;\n\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\n            const memoryRequiredForViewProjMatrix = 16 * Constants.BytesPerFloat;\n            const memoryRequiredForPrecomputedDistances = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForIntermediateSortBuffers = Constants.DepthMapRange * Constants.BytesPerInt * 2;\n            const extraMemory = Constants.MemoryPageSize * 32;\n\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\n                                        memoryRequiredForCenters +\n                                        memoryRequiredForViewProjMatrix +\n                                        memoryRequiredForPrecomputedDistances +\n                                        memoryRequiredForMappedDistances +\n                                        memoryRequiredForSortedIndexes +\n                                        memoryRequiredForIntermediateSortBuffers +\n                                        extraMemory;\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\n            const sorterWasmImport = {\n                module: {},\n                env: {\n                    memory: new WebAssembly.Memory({\n                        initial: totalPagesRequired * 2,\n                        maximum: totalPagesRequired * 4,\n                        shared: true,\n                    }),\n                }\n            };\n            WebAssembly.compile(sorterWasmBytes)\n            .then((wasmModule) => {\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n            })\n            .then((instance) => {\n                wasmInstance = instance;\n                indexesToSortOffset = 0;\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\n                viewProjOffset = centersOffset + memoryRequiredForCenters;\n                precomputedDistancesOffset = viewProjOffset + memoryRequiredForViewProjMatrix;\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\n                wasmMemory = sorterWasmImport.env.memory.buffer;\n                self.postMessage({\n                    'sortSetupPhase1Complete': true,\n                    'indexesToSortBuffer': wasmMemory,\n                    'indexesToSortOffset': indexesToSortOffset,\n                    'sortedIndexesBuffer': wasmMemory,\n                    'sortedIndexesOffset': sortedIndexesOffset,\n                    'precomputedDistancesBuffer': wasmMemory,\n                    'precomputedDistancesOffset': precomputedDistancesOffset\n                });\n            });\n        }\n    };\n}\n\nexport function createSortWorker(splatCount) {\n    const worker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n\n    const sorterWasmBinaryString = atob(SorterWasm);\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n    }\n\n    worker.postMessage({\n        'init': {\n            'sorterWasmBytes': sorterWasmBytes.buffer,\n            'splatCount': splatCount,\n            // Super hacky\n            'Constants': {\n                'BytesPerFloat': Constants.BytesPerFloat,\n                'BytesPerInt': Constants.BytesPerInt,\n                'DepthMapRange': Constants.DepthMapRange,\n                'MemoryPageSize': Constants.MemoryPageSize\n            }\n        }\n    });\n    return worker;\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from './OrbitControls.js';\nimport { PlyLoader } from './PlyLoader.js';\nimport { SplatLoader } from './SplatLoader.js';\nimport { LoadingSpinner } from './LoadingSpinner.js';\nimport { SceneHelper } from './SceneHelper.js';\nimport { Raycaster } from './raycaster/Raycaster.js';\nimport { SplatMesh } from './SplatMesh.js';\nimport { createSortWorker } from './worker/SortWorker.js';\nimport { Constants } from './Constants.js';\nimport { getCurrentTime } from './Util.js';\n\nconst THREE_CAMERA_FOV = 50;\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\n\nexport class Viewer {\n\n    constructor(params = {}) {\n\n        if (!params.cameraUp) params.cameraUp = [0, 1, 0];\n        if (!params.initialCameraPosition) params.initialCameraPosition = [0, 10, 15];\n        if (!params.initialCameraLookAt) params.initialCameraLookAt = [0, 0, 0];\n        if (params.selfDrivenMode === undefined) params.selfDrivenMode = true;\n        if (params.useBuiltInControls === undefined) params.useBuiltInControls = true;\n\n        this.rootElement = params.rootElement;\n        this.usingExternalCamera = params.camera ? true : false;\n        this.usingExternalRenderer = params.renderer ? true : false;\n\n        this.cameraUp = new THREE.Vector3().fromArray(params.cameraUp);\n        this.initialCameraPosition = new THREE.Vector3().fromArray(params.initialCameraPosition);\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(params.initialCameraLookAt);\n\n        this.scene = params.scene;\n        this.renderer = params.renderer;\n        this.camera = params.camera;\n        this.useBuiltInControls = params.useBuiltInControls;\n        this.controls = null;\n\n        this.ignoreDevicePixelRatio = params.ignoreDevicePixelRatio || false;\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\n\n        this.selfDrivenMode = params.selfDrivenMode;\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n\n        this.gpuAcceleratedSort = params.gpuAcceleratedSort;\n        if (this.gpuAcceleratedSort !== true && this.gpuAcceleratedSort !== false) {\n            this.gpuAcceleratedSort = true;\n        }\n\n        this.showMeshCursor = false;\n        this.showControlPlane = false;\n        this.showInfo = false;\n\n        this.sceneHelper = null;\n\n        this.sortWorker = null;\n        this.sortRunning = false;\n        this.splatRenderCount = 0;\n        this.sortWorkerIndexesToSort = null;\n        this.sortWorkerSortedIndexes = null;\n        this.sortWorkerPrecomputedDistances = null;\n\n        this.splatMesh = null;\n\n        this.selfDrivenModeRunning = false;\n        this.splatRenderingInitialized = false;\n\n        this.raycaster = new Raycaster();\n\n        this.infoPanel = null;\n        this.infoPanelCells = {};\n\n        this.currentFPS = 0;\n        this.lastSortTime = 0;\n\n        this.previousCameraTarget = new THREE.Vector3();\n        this.nextCameraTarget = new THREE.Vector3();\n\n        this.mousePosition = new THREE.Vector2();\n        this.mouseDownPosition = new THREE.Vector2();\n        this.mouseDownTime = null;\n\n        this.initialized = false;\n        this.init();\n    }\n\n    init() {\n\n        if (this.initialized) return;\n\n        if (!this.rootElement && !this.usingExternalRenderer) {\n            this.rootElement = document.createElement('div');\n            this.rootElement.style.width = '100%';\n            this.rootElement.style.height = '100%';\n            document.body.appendChild(this.rootElement);\n        }\n\n        const renderDimensions = new THREE.Vector2();\n        this.getRenderDimensions(renderDimensions);\n\n        if (!this.usingExternalCamera) {\n            this.camera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 500);\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.lookAt(this.initialCameraLookAt);\n            this.camera.up.copy(this.cameraUp).normalize();\n        }\n\n        if (!this.usingExternalRenderer) {\n            this.renderer = new THREE.WebGLRenderer({\n                antialias: false,\n                precision: 'highp'\n            });\n            this.renderer.setPixelRatio(this.devicePixelRatio);\n            this.renderer.autoClear = true;\n            this.renderer.setClearColor(0.0, 0.0, 0.0, 0.0);\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n        }\n\n        this.scene = this.scene || new THREE.Scene();\n        this.sceneHelper = new SceneHelper(this.scene);\n        this.sceneHelper.setupMeshCursor();\n        this.sceneHelper.setupFocusMarker();\n        this.sceneHelper.setupControlPlane();\n\n        if (this.useBuiltInControls) {\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n            this.controls.listenToKeyEvents(window);\n            this.controls.rotateSpeed = 0.5;\n            this.controls.maxPolarAngle = Math.PI * .75;\n            this.controls.minPolarAngle = 0.1;\n            this.controls.enableDamping = true;\n            this.controls.dampingFactor = 0.05;\n            this.controls.target.copy(this.initialCameraLookAt);\n            this.rootElement.addEventListener('pointermove', this.onMouseMove.bind(this), false);\n            this.rootElement.addEventListener('pointerdown', this.onMouseDown.bind(this), false);\n            this.rootElement.addEventListener('pointerup', this.onMouseUp.bind(this), false);\n            window.addEventListener('keydown', this.onKeyDown.bind(this), false);\n        }\n\n        if (!this.usingExternalRenderer) {\n            const resizeObserver = new ResizeObserver(() => {\n                this.getRenderDimensions(renderDimensions);\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n            });\n            resizeObserver.observe(this.rootElement);\n            this.rootElement.appendChild(this.renderer.domElement);\n        }\n\n        this.setupInfoPanel();\n\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement);\n        this.loadingSpinner.hide();\n\n        this.initialized = true;\n    }\n\n    onKeyDown = function() {\n\n        const forward = new THREE.Vector3();\n        const tempMatrixLeft = new THREE.Matrix4();\n        const tempMatrixRight = new THREE.Matrix4();\n\n        return function(e) {\n            forward.set(0, 0, -1);\n            forward.transformDirection(this.camera.matrixWorld);\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\n            switch (e.code) {\n                case 'ArrowLeft':\n                    this.camera.up.transformDirection(tempMatrixLeft);\n                break;\n                case 'ArrowRight':\n                    this.camera.up.transformDirection(tempMatrixRight);\n                break;\n                case 'KeyC':\n                    this.showMeshCursor = !this.showMeshCursor;\n                break;\n                case 'KeyP':\n                    this.showControlPlane = !this.showControlPlane;\n                break;\n                case 'KeyI':\n                    this.showInfo = !this.showInfo;\n                    if (this.showInfo) {\n                        this.infoPanel.style.display = 'block';\n                    } else {\n                        this.infoPanel.style.display = 'none';\n                    }\n                break;\n            }\n        };\n\n    }();\n\n    onMouseMove(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n    }\n\n    onMouseDown() {\n        this.mouseDownPosition.copy(this.mousePosition);\n        this.mouseDownTime = getCurrentTime();\n    }\n\n    onMouseUp = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        const clickOffset = new THREE.Vector2();\n        const toNewFocalPoint = new THREE.Vector3();\n        const outHits = [];\n\n        return function(mouse) {\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\n            const mouseUpTime = getCurrentTime();\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\n            if (!this.transitioningCameraTarget && wasClick) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    const intersectionPoint = outHits[0].origin;\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\n                        this.previousCameraTarget.copy(this.controls.target);\n                        this.nextCameraTarget.copy(intersectionPoint);\n                        this.transitioningCameraTarget = true;\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\n                    }\n                }\n            }\n        };\n\n    }();\n\n    getRenderDimensions(outDimensions) {\n        if (this.rootElement) {\n            outDimensions.x = this.rootElement.offsetWidth;\n            outDimensions.y = this.rootElement.offsetHeight;\n        } else {\n            this.renderer.getSize(outDimensions);\n        }\n    }\n\n    setupInfoPanel() {\n        this.infoPanel = document.createElement('div');\n        this.infoPanel.style.position = 'absolute';\n        this.infoPanel.style.padding = '10px';\n        this.infoPanel.style.backgroundColor = '#cccccc';\n        this.infoPanel.style.border = '#aaaaaa 1px solid';\n        this.infoPanel.style.zIndex = 100;\n        this.infoPanel.style.width = '375px';\n        this.infoPanel.style.fontFamily = 'arial';\n        this.infoPanel.style.fontSize = '10pt';\n        this.infoPanel.style.textAlign = 'left';\n\n        const layout = [\n            ['Camera position', 'cameraPosition'],\n            ['Camera look-at', 'cameraLookAt'],\n            ['Camera up', 'cameraUp'],\n            ['Cursor position', 'cursorPosition'],\n            ['FPS', 'fps'],\n            ['Render window', 'renderWindow'],\n            ['Rendering:', 'renderSplatCount'],\n            ['Sort time', 'sortTime']\n        ];\n\n        const infoTable = document.createElement('div');\n        infoTable.style.display = 'table';\n\n        for (let layoutEntry of layout) {\n            const row = document.createElement('div');\n            row.style.display = 'table-row';\n\n            const labelCell = document.createElement('div');\n            labelCell.style.display = 'table-cell';\n            labelCell.style.width = '110px';\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\n\n            const spacerCell = document.createElement('div');\n            spacerCell.style.display = 'table-cell';\n            spacerCell.style.width = '10px';\n            spacerCell.innerHTML = ' ';\n\n            const infoCell = document.createElement('div');\n            infoCell.style.display = 'table-cell';\n            infoCell.innerHTML = '';\n\n            this.infoPanelCells[layoutEntry[1]] = infoCell;\n\n            row.appendChild(labelCell);\n            row.appendChild(spacerCell);\n            row.appendChild(infoCell);\n\n            infoTable.appendChild(row);\n        }\n\n        this.infoPanel.appendChild(infoTable);\n        this.infoPanel.style.display = 'none';\n        this.renderer.domElement.parentElement.prepend(this.infoPanel);\n    }\n\n    updateSplatMeshUniforms = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            const splatCount = this.splatMesh.getSplatCount();\n            if (splatCount > 0) {\n                this.getRenderDimensions(renderDimensions);\n                this.cameraFocalLengthX = this.camera.projectionMatrix.elements[0] *\n                                          this.devicePixelRatio * renderDimensions.x * 0.45;\n                                          this.cameraFocalLengthY = this.camera.projectionMatrix.elements[5] *\n                                          this.devicePixelRatio * renderDimensions.y * 0.45;\n                this.splatMesh.updateUniforms(renderDimensions, this.cameraFocalLengthX, this.cameraFocalLengthY);\n            }\n        };\n\n    }();\n\n    loadFile(fileURL, options = {}) {\n        if (options.position) options.position = new THREE.Vector3().fromArray(options.position);\n        if (options.orientation) options.orientation = new THREE.Quaternion().fromArray(options.orientation);\n        options.splatAlphaRemovalThreshold = options.splatAlphaRemovalThreshold || 1;\n        options.halfPrecisionCovariancesOnGPU = !!options.halfPrecisionCovariancesOnGPU;\n        if (options.showLoadingSpinner !== false) options.showLoadingSpinner = true;\n\n        if (options.showLoadingSpinner) this.loadingSpinner.show();\n        const downloadProgress = (percent, percentLabel) => {\n            if (options.showLoadingSpinner) {\n                if (percent == 100) {\n                    this.loadingSpinner.setMessage(`Download complete!`);\n                } else {\n                    const suffix = percentLabel ? `: ${percentLabel}` : `...`;\n                    this.loadingSpinner.setMessage(`Downloading${suffix}`);\n                }\n            }\n            if (options.onProgress) options.onProgress(percent, percentLabel, 'downloading');\n        };\n\n        return new Promise((resolve, reject) => {\n            let fileLoadPromise;\n            if (fileURL.endsWith('.splat')) {\n                fileLoadPromise = new SplatLoader().loadFromURL(fileURL, downloadProgress);\n            } else if (fileURL.endsWith('.ply')) {\n                fileLoadPromise = new PlyLoader().loadFromURL(fileURL, downloadProgress, 0, options.splatAlphaRemovalThreshold);\n            } else {\n                reject(new Error(`Viewer::loadFile -> File format not supported: ${fileURL}`));\n            }\n            fileLoadPromise\n            .then((splatBuffer) => {\n                if (options.showLoadingSpinner) this.loadingSpinner.hide();\n                if (options.onProgress) options.onProgress(0, '0%', 'processing');\n                this.loadSplatBuffer(splatBuffer, options).then(() => {\n                    if (options.onProgress) options.onProgress(100, '100%', 'processing');\n                    resolve();\n                });\n            })\n            .catch((e) => {\n                reject(new Error(`Viewer::loadFile -> Could not load file ${fileURL}`));\n            });\n        });\n    }\n\n    loadSplatBuffer(splatBuffer, options) {\n        if (options.showLoadingSpinner !== false) options.showLoadingSpinner = true;\n        return new Promise((resolve) => {\n            if (options.showLoadingSpinner) {\n                this.loadingSpinner.show();\n                this.loadingSpinner.setMessage(`Processing splats...`);\n            }\n            window.setTimeout(() => {\n                this.setupSplatMesh(splatBuffer, options.splatAlphaRemovalThreshold, options.position,\n                                    options.orientation, options.halfPrecisionCovariancesOnGPU,\n                                    this.devicePixelRatio, this.gpuAcceleratedSort);\n                this.setupSortWorker(splatBuffer).then(() => {\n                    if (options.showLoadingSpinner) this.loadingSpinner.hide();\n                    resolve();\n                });\n            }, 1);\n        });\n    }\n\n    setupSplatMesh(splatBuffer, splatAlphaRemovalThreshold = 1, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(),\n                   halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1, gpuAcceleratedSort = true) {\n        const splatCount = splatBuffer.getSplatCount();\n        console.log(`Splat count: ${splatCount}`);\n\n        this.splatMesh = SplatMesh.buildMesh(splatBuffer, this.renderer, splatAlphaRemovalThreshold,\n                                             halfPrecisionCovariancesOnGPU, devicePixelRatio, gpuAcceleratedSort);\n        this.splatMesh.position.copy(position);\n        this.splatMesh.quaternion.copy(quaternion);\n        this.splatMesh.frustumCulled = false;\n        this.updateSplatMeshUniforms();\n\n        this.splatRenderCount = splatCount;\n    }\n\n    setupSortWorker(splatBuffer) {\n        return new Promise((resolve) => {\n            const splatCount = splatBuffer.getSplatCount();\n            this.sortWorker = createSortWorker(splatCount);\n            this.sortWorker.onmessage = (e) => {\n                if (e.data.sortDone) {\n                    this.sortRunning = false;\n                    this.splatMesh.updateIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\n                    this.lastSortTime = e.data.sortTime;\n                } else if (e.data.sortCanceled) {\n                    this.sortRunning = false;\n                } else if (e.data.sortSetupPhase1Complete) {\n                    console.log('Sorting web worker WASM setup complete.');\n                    this.sortWorker.postMessage({\n                        'centers': this.splatMesh.getIntegerCenters(true).buffer\n                    });\n                    this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\n                                                                   e.data.sortedIndexesOffset, splatBuffer.getSplatCount());\n                    this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\n                                                                   e.data.indexesToSortOffset, splatBuffer.getSplatCount());\n                    this.sortWorkerPrecomputedDistances = new Int32Array(e.data.precomputedDistancesBuffer,\n                                                                         e.data.precomputedDistancesOffset, splatBuffer.getSplatCount());\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\n                } else if (e.data.sortSetupComplete) {\n                    console.log('Sorting web worker ready.');\n                    this.splatMesh.updateIndexes(this.sortWorkerSortedIndexes, splatBuffer.getSplatCount());\n                    const splatDataTextures = this.splatMesh.getSplatDataTextures();\n                    const covariancesTextureSize = splatDataTextures.covariances.size;\n                    const centersColorsTextureSize = splatDataTextures.centerColors.size;\n                    console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\n                    console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\n                    this.updateView(true, true);\n                    this.splatRenderingInitialized = true;\n                    resolve();\n                }\n            };\n        });\n    }\n\n    gatherSceneNodes = function() {\n\n        const nodeRenderList = [];\n        const tempVectorYZ = new THREE.Vector3();\n        const tempVectorXZ = new THREE.Vector3();\n        const tempVector = new THREE.Vector3();\n        const tempMatrix4 = new THREE.Matrix4();\n        const renderDimensions = new THREE.Vector3();\n        const forward = new THREE.Vector3(0, 0, -1);\n\n        const tempMax = new THREE.Vector3();\n        const nodeSize = (node) => {\n            return tempMax.copy(node.max).sub(node.min).length();\n        };\n\n        const MaximumDistanceToRender = 125;\n\n        return function(gatherAllNodes) {\n\n            this.getRenderDimensions(renderDimensions);\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\n            const cosFovXOver2 = Math.cos(fovXOver2);\n            const cosFovYOver2 = Math.cos(fovYOver2);\n            tempMatrix4.copy(this.camera.matrixWorld).invert();\n            tempMatrix4.multiply(this.splatMesh.matrixWorld);\n\n            const splatTree = this.splatMesh.getSplatTree();\n            let nodeRenderCount = 0;\n            let splatRenderCount = 0;\n            const nodeCount = splatTree.nodesWithIndexes.length;\n            for (let i = 0; i < nodeCount; i++) {\n                const node = splatTree.nodesWithIndexes[i];\n                tempVector.copy(node.center).applyMatrix4(tempMatrix4);\n                const distanceToNode = tempVector.length();\n                tempVector.normalize();\n\n                tempVectorYZ.copy(tempVector).setX(0).normalize();\n                tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n                const cameraAngleXZDot = forward.dot(tempVectorXZ);\n                const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n                const ns = nodeSize(node);\n                const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\n                const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\n                if (!gatherAllNodes && ((outOfFovX || outOfFovY || distanceToNode > MaximumDistanceToRender) && distanceToNode > ns)) {\n                    continue;\n                }\n                splatRenderCount += node.data.indexes.length;\n                nodeRenderList[nodeRenderCount] = node;\n                node.data.distanceToNode = distanceToNode;\n                nodeRenderCount++;\n            }\n\n            nodeRenderList.length = nodeRenderCount;\n            nodeRenderList.sort((a, b) => {\n                if (a.data.distanceToNode < b.data.distanceToNode) return -1;\n                else return 1;\n            });\n\n            this.splatRenderCount = splatRenderCount;\n            let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\n            for (let i = 0; i < nodeRenderCount; i++) {\n                const node = nodeRenderList[i];\n                const windowSizeInts = node.data.indexes.length;\n                const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\n                let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer, currentByteOffset - windowSizeBytes, windowSizeInts);\n                destView.set(node.data.indexes);\n                currentByteOffset -= windowSizeBytes;\n            }\n\n        };\n\n    }();\n\n    start() {\n        if (this.selfDrivenMode) {\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\n            this.selfDrivenModeRunning = true;\n        } else {\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\n        }\n    }\n\n    stop() {\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\n            cancelAnimationFrame();\n            this.selfDrivenModeRunning = false;\n        }\n    }\n\n    updateFPS = function() {\n\n        let lastCalcTime = getCurrentTime();\n        let frameCount = 0;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            const calcDelta = currentTime - lastCalcTime;\n            if (calcDelta >= 1.0) {\n                this.currentFPS = frameCount;\n                frameCount = 0;\n                lastCalcTime = currentTime;\n            } else {\n                frameCount++;\n            }\n        };\n\n    }();\n\n    updateForRendererSizeChanges = function() {\n\n        const lastRendererSize = new THREE.Vector2();\n        const currentRendererSize = new THREE.Vector2();\n\n        return function() {\n            this.renderer.getSize(currentRendererSize);\n            if (currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\n                if (!this.usingExternalCamera) {\n                    this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n                    this.camera.updateProjectionMatrix();\n                }\n                if (this.splatRenderingInitialized) {\n                    this.updateSplatMeshUniforms();\n                }\n                lastRendererSize.copy(currentRendererSize);\n            }\n        };\n\n    }();\n\n    selfDrivenUpdate() {\n        if (this.selfDrivenMode) {\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\n        }\n        this.update();\n        this.render();\n    }\n\n    update() {\n        if (this.controls) {\n            this.controls.update();\n        }\n        this.updateView();\n        this.updateForRendererSizeChanges();\n        this.updateMeshCursor();\n        this.updateFPS();\n        this.timingSensitiveUpdates();\n        this.updateInfo();\n        this.updateControlPlane();\n    }\n\n    timingSensitiveUpdates = function() {\n\n        let lastUpdateTime;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\n            const timeDelta = currentTime - lastUpdateTime;\n\n            this.updateCameraTransition(currentTime);\n            this.updateFocusMarker(timeDelta);\n\n            lastUpdateTime = currentTime;\n        };\n\n    }();\n\n    updateCameraTransition = function() {\n\n        let tempCameraTarget = new THREE.Vector3();\n        let toPreviousTarget = new THREE.Vector3();\n        let toNextTarget = new THREE.Vector3();\n\n        return function(currentTime) {\n            if (this.transitioningCameraTarget) {\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\n                this.camera.lookAt(tempCameraTarget);\n                this.controls.target.copy(tempCameraTarget);\n                if (t >= 1.0) {\n                    this.transitioningCameraTarget = false;\n                }\n            }\n        };\n\n    }();\n\n    updateFocusMarker = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        let wasTransitioning = false;\n\n        return function(timeDelta) {\n            this.getRenderDimensions(renderDimensions);\n            const fadeInSpeed = 10.0;\n            const fadeOutSpeed = 2.5;\n            if (this.transitioningCameraTarget) {\n                this.sceneHelper.setFocusMarkerVisibility(true);\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + fadeInSpeed * timeDelta, 1.0);\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                wasTransitioning = true;\n            } else {\n                let currentFocusMarkerOpacity;\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\n                if (currentFocusMarkerOpacity > 0) {\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - fadeOutSpeed * timeDelta, 0.0);\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\n                }\n                wasTransitioning = false;\n            }\n        };\n\n    }();\n\n    updateMeshCursor = function() {\n\n        const outHits = [];\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (this.showMeshCursor) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    this.sceneHelper.setMeshCursorVisibility(true);\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\n                } else {\n                    this.sceneHelper.setMeshCursorVisibility(false);\n                }\n            } else {\n                this.sceneHelper.setMeshCursorVisibility(false);\n            }\n        };\n\n    }();\n\n    updateInfo = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (this.showInfo) {\n                const splatCount = this.splatMesh.getSplatCount();\n                this.getRenderDimensions(renderDimensions);\n\n                const cameraPos = this.camera.position;\n                const cameraPosString = `[${cameraPos.x.toFixed(5)}, ${cameraPos.y.toFixed(5)}, ${cameraPos.z.toFixed(5)}]`;\n                this.infoPanelCells.cameraPosition.innerHTML = cameraPosString;\n\n                const cameraLookAt = this.controls.target;\n                const cameraLookAtString = `[${cameraLookAt.x.toFixed(5)}, ${cameraLookAt.y.toFixed(5)}, ${cameraLookAt.z.toFixed(5)}]`;\n                this.infoPanelCells.cameraLookAt.innerHTML = cameraLookAtString;\n\n                const cameraUp = this.camera.up;\n                const cameraUpString = `[${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}]`;\n                this.infoPanelCells.cameraUp.innerHTML = cameraUpString;\n\n                if (this.showMeshCursor) {\n                    const cursorPos = this.sceneHelper.meshCursor.position;\n                    const cursorPosString = `[${cursorPos.x.toFixed(5)}, ${cursorPos.y.toFixed(5)}, ${cursorPos.z.toFixed(5)}]`;\n                    this.infoPanelCells.cursorPosition.innerHTML = cursorPosString;\n                } else {\n                    this.infoPanelCells.cursorPosition.innerHTML = 'N/A';\n                }\n\n                this.infoPanelCells.fps.innerHTML = this.currentFPS;\n                this.infoPanelCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\n\n                const renderPct = this.splatRenderCount / splatCount * 100;\n                this.infoPanelCells.renderSplatCount.innerHTML =\n                    `${this.splatRenderCount} splats out of ${splatCount} (${renderPct.toFixed(2)}%)`;\n\n                this.infoPanelCells.sortTime.innerHTML = `${this.lastSortTime.toFixed(3)} ms`;\n            }\n        };\n\n    }();\n\n    updateControlPlane() {\n        if (this.showControlPlane) {\n            this.sceneHelper.setControlPlaneVisibility(true);\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\n        } else {\n            this.sceneHelper.setControlPlaneVisibility(false);\n        }\n    }\n\n    render = function() {\n\n        return function() {\n            const hasRenderables = (scene) => {\n                for (let child of scene.children) {\n                    if (child.visible) {\n                    return true;\n                    }\n                }\n                return false;\n            };\n\n            const savedAuoClear = this.renderer.autoClear;\n            this.renderer.autoClear = false;\n            if (hasRenderables(this.scene)) this.renderer.render(this.scene, this.camera);\n            this.renderer.render(this.splatMesh, this.camera);\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\n            this.renderer.autoClear = savedAuoClear;\n        };\n\n    }();\n\n    updateView = function() {\n\n        const tempMatrix = new THREE.Matrix4();\n        const cameraPositionArray = [];\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\n        const lastSortViewPos = new THREE.Vector3();\n        const sortViewOffset = new THREE.Vector3();\n        const queuedTiers = [];\n\n        const partialSorts = [\n            {\n                'angleThreshold': 0.55,\n                'sortFractions': [0.125, 0.33333, 0.75]\n            },\n            {\n                'angleThreshold': 0.65,\n                'sortFractions': [0.33333, 0.66667]\n            },\n            {\n                'angleThreshold': 0.8,\n                'sortFractions': [0.5]\n            }\n        ];\n\n        return function(force = false, gatherAllNodes = false) {\n            let angleDiff = 0;\n            let positionDiff = 0;\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n            let needsRefreshForRotation = false;\n            let needsRefreshForPosition = false;\n            angleDiff = sortViewDir.dot(lastSortViewDir);\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\n\n            if (!force && queuedTiers.length === 0) {\n                if (angleDiff <= 0.95) needsRefreshForRotation = true;\n                if (positionDiff >= 1.0) needsRefreshForPosition = true;\n                if (!needsRefreshForRotation && !needsRefreshForPosition) return;\n            }\n\n            tempMatrix.copy(this.camera.matrixWorld).invert();\n            tempMatrix.premultiply(this.camera.projectionMatrix);\n            tempMatrix.multiply(this.splatMesh.matrixWorld);\n            cameraPositionArray[0] = this.camera.position.x;\n            cameraPositionArray[1] = this.camera.position.y;\n            cameraPositionArray[2] = this.camera.position.z;\n\n            if (!this.sortRunning) {\n                let sortCount;\n                this.sortRunning = true;\n                this.gatherSceneNodes(gatherAllNodes);\n                if (this.gpuAcceleratedSort && (queuedTiers.length <= 1 || queuedTiers.length % 2 === 0)) {\n                    this.splatMesh.computeDistancesOnGPU(tempMatrix, this.sortWorkerPrecomputedDistances);\n                }\n                if (queuedTiers.length === 0) {\n                    for (let partialSort of partialSorts) {\n                        if (angleDiff < partialSort.angleThreshold) {\n                            for (let sortFraction of partialSort.sortFractions) {\n                                queuedTiers.push(Math.floor(this.splatRenderCount * sortFraction));\n                            }\n                            break;\n                        }\n                    }\n                    queuedTiers.push(this.splatRenderCount);\n                }\n                sortCount = Math.min(queuedTiers.shift(), this.splatRenderCount);\n                this.sortWorker.postMessage({\n                    sort: {\n                        'viewProj': this.splatMesh.getIntegerMatrixArray(tempMatrix),\n                        'cameraPosition': cameraPositionArray,\n                        'splatRenderCount': this.splatRenderCount,\n                        'splatSortCount': sortCount,\n                        'usePrecomputedDistances': this.gpuAcceleratedSort\n                    }\n                });\n                if (queuedTiers.length === 0) {\n                    lastSortViewPos.copy(this.camera.position);\n                    lastSortViewDir.copy(sortViewDir);\n                }\n            }\n        };\n\n    }();\n\n    getSplatMesh() {\n        return this.splatMesh;\n    }\n}\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u0017\u0003`\u0000\u0000`\f\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0004\u0003\u0003\u0000\u0001\u000b�\u0004\u0002\u0002{\u0002} \t \bk!\n\u0002@ \u000b\u0004@A����\u0007!\u000bA����x!\b \t \nM\r\u0001 \n!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \u000b \u0001 \u000bH\u001b!\u000b \u0001 \b \u0001 \bJ\u001b!\b \u0005A\u0001j\"\u0005 \tG\r\u0000\u000b\f\u0001\u000bA����\u0007!\u000bA����x!\b \t \nM\r\u0000 \u0005A(j \u0005A\u0018j \u0005�\t\u0002\b�V\u0002\u0000\u0001�V\u0002\u0000\u0002!\r \n!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \r��\u0001\"\f�\u001b\u0000 \f�\u001b\u0001j \f�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \u000b \u0002 \u000bH\u001b!\u000b \u0002 \b \u0002 \bJ\u001b!\b \u0005A\u0001j\"\u0005 \tG\r\u0000\u000b\u000b \t \nK\u0004@ \u0007A\u0001k� \b� \u000b���!\u000e \n!\b\u0003@\u0002 \u000e \u0003 \bA\u0002tj\"\u0001(\u0002\u0000 \u000bk��\"\u000f�C\u0000\u0000\u0000O]\u0004@ \u000f�\f\u0001\u000bA����x\u000b!\u0005 \u0001 \u00056\u0002\u0000 \u0004 \u0005A\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \bA\u0001j\"\b \tG\r\u0000\u000b\u000b \u0007A\u0002O\u0004@ \u0004(\u0002\u0000!\bA\u0001!\u000b\u0003@ \u0004 \u000bA\u0002tj\"\u0001 \u0001(\u0002\u0000 \bj\"\b6\u0002\u0000 \u000bA\u0001j\"\u000b \u0007G\r\u0000\u000b\u000b \nA\u0000J\u0004@ \n!\u000b\u0003@ \u0006 \u000bA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \u000bA\u0001J!\u0002 \u0001!\u000b \u0002\r\u0000\u000b\u000b \t \nJ\u0004@ \t!\u000b\u0003@ \u0006 \t \u0004 \u0003 \u000bA\u0001k\"\u000bA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \u000bH\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b"],"names":["tempVector3A","THREE","Vector3","tempVector3B","tempVector4A","Vector4","tempVector4B","tempQuaternion4A","Quaternion","tempQuaternion4B","fbf","tbf","SplatBuffer","static","BytesPerCenter","BytesPerScale","BytesPerColor","BytesPerRotation","ScaleRange","constructor","bufferData","this","headerBufferData","ArrayBuffer","HeaderSizeBytes","headerArrayUint8","Uint8Array","headerArrayUint32","Uint32Array","headerArrayFloat32","Float32Array","set","versionMajor","versionMinor","headerExtraK","compressionLevel","splatCount","bucketSize","bucketCount","bucketBlockSize","halfBucketBlockSize","bytesPerBucket","compressionScaleRange","CompressionLevels","compressionScaleFactor","dataBufferSizeBytes","byteLength","splatBufferData","bytesPerCenter","bytesPerScale","bytesPerColor","bytesPerRotation","bytesPerSplat","bind","linkBufferArrays","FloatArray","Uint16Array","centerArray","CenterComponentCount","scaleArray","ScaleComponentCount","colorArray","ColorComponentCount","rotationArray","RotationComponentCount","bucketsBase","f","DataUtils","fromHalfFloat","toHalfFloat","getHeaderBufferData","getSplatBufferData","getCenter","index","outCenter","bucket","centerBase","sf","sr","bucketIndex","Math","floor","x","y","z","setCenter","center","maxR","clamp","round","getScale","outScale","scaleBase","setScale","scale","getRotation","outRotation","rotationBase","setRotation","rotation","w","getColor","outColor","colorBase","setColor","color","getSplatCount","fillCovarianceArray","covarianceArray","rotationMatrix","Matrix3","scaleMatrix","covarianceMatrix","tempMatrix4","Matrix4","i","makeScale","setFromMatrix4","makeRotationFromQuaternion","copy","multiply","M","elements","CovarianceSizeFloats","fillCenterArray","outCenterArray","fillScaleArray","outScaleArray","fillRotationArray","outRotationArray","fillColorArray","outColorArray","swapVertices","indexA","indexB","floatView","int32View","Int32Array","buffer","uintEncodedFloat","fetchWithProgress","path","onProgress","Promise","resolve","reject","fetch","then","async","data","reader","body","getReader","bytesDownloaded","_fileSize","headers","get","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","push","error","val","min","max","getCurrentTime","performance","now","SplatBufferBucketSize","PlyParser","plyBuffer","decodeHeader","decoder","TextDecoder","headerOffset","headerText","console","log","readChunkSize","Error","headerChunk","decode","endHeaderTestChunk","includes","headerLines","split","propertyTypes","line","trim","startsWith","splatCountMatch","match","propertyMatch","propertyType","vertexByteOffset","indexOf","vertexData","DataView","readRawVertexFast","offset","fieldOffsets","propertiesToRead","outVertex","rawVertex","property","getFloat32","getUint8","parseToSplatBuffer","minimumAlpha","startTime","nRestCoeffs","propertyName","nCoeffsPerColor","shFeatureOrder","rgb","plyRowSize","fieldSize","double","int","uint","float","short","ushort","uchar","fieldName","hasOwnProperty","type","validVertexes","vertexZero","propertyToRead","row","alpha","exp","opacity","newVertex","centersForBucketCalcs","buckets","computeBuckets","paddedSplatCount","headerSize","header","centerBuffer","scaleBuffer","colorBuffer","rotationBuffer","SplatBufferBucketBlockSize","doubleCompressionScaleRange","bucketCenter","bucketCenterDelta","outSplatIndex","b","fromArray","splats","invalidSplat","scales","rot","quat","rot_1","rot_2","rot_3","rot_0","normalize","scale_0","scale_1","scale_2","thf","sub","rgba","Uint8ClampedArray","SH_C0","f_dc_0","f_dc_1","f_dc_2","bucketsSize","splatDataBufferSize","unifiedBufferSize","unifiedBuffer","bucketArray","base","splatBuffer","endTime","centers","dimensions","yBlocks","ceil","zBlocks","blockCenter","fullBuckets","partiallyFullBuckets","xBlock","yBlock","zBlock","blockSize","bucketId","toArray","PlyLoader","fetchFile","fileName","catch","err","loadFromURL","plyFileData","SplatLoader","downLoadLink","setFromBuffer","downloadFile","headerData","splatData","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","super","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","position","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","isFinite","makeSafe","addScaledVector","panOffset","add","performCursorZoom","isOrthographicCamera","radius","clampDistance","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","quaternion","dispose","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","pow","angle","rotateUp","panLeft","v","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","element","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","sqrt","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","LoadingSpinner","message","container","spinnerDivContainer","spinnerDiv","messageDiv","className","display","innerHTML","show","hide","setMessage","msg","ArrowHelper","Object3D","dir","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","_axis","radians","acos","setFromAxisAngle","material","source","geometry","SceneHelper","scene","splatRenderTarget","renderTargetCopyMaterial","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","updateSplatRenderTargetForRenderDimensions","WebGLRenderTarget","format","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","visible","destroyMeshCursor","children","forEach","child","remove","setMeshCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","sphereMesh","updateFocusMarker","tempPosition","tempMatrix","viewport","matrixWorld","applyMatrix4","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","debugRoot","createDebugMeshes","secondaryDebugRoot","createSecondaryDebugMeshes","renderOrder","debugMeshRoot","createMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","point","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","t0","t1","t","Hit","hitClone","Raycaster","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","localRay","splatMesh","outHits","splatTree","getSplatTree","rootNode","castRayAtSplatTreeNode","sort","a","hit","tempCenter","tempScale","tempRotation","tempHit","scaleEpsilon","node","boundingBox","indexes","splatIndex","idGen","SplatTreeNode","depth","id","Box3","SplatTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","addedIndexes","nodesWithIndexes","processSplatBuffer","filterFunc","processNode","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","j","containsPoint","childNode","countLeaves","leafCount","visitLeaves","visitFunc","visitLeavesFromNode","SplatMesh","buildMesh","renderer","splatAlphaRemovalThreshold","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","buildGeomtery","buildMaterial","splatDataTextures","buildSplatTree","distancesTransformFeedback","program","centersBuffer","outDistancesBuffer","centersLoc","viewProjLoc","setupDistancesTransformFeedback","resetLocalSplatDataAndTexturesFromSplatBuffer","covariancesTexture","centersColorsTexture","focal","basisViewport","debugColor","covariancesTextureSize","centersColorsTextureSize","alphaTest","NormalBlending","baseGeometry","BufferGeometry","setIndex","positionsArray","positions","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","time","splatColor","timeEnd","leavesWithVertices","avgSplatCount","maxSplatCount","nodeCount","nodeSplatCount","updateLocalSplatDataFromSplatBuffer","allocateAndStoreLocalSplatDataInTextures","updateCentersGPUBufferForDistancesComputation","covariances","colors","paddedCovariances","DataTexture","RGFormat","HalfFloatType","FloatType","paddedCenterColors","c","colorsBase","centersBase","centerColorsBase","r","g","RGBAIntegerFormat","internalFormat","texture","size","centerColors","updateSplatDataToDataTextures","updateLocalCovarianceDataToDataTexture","updateLocalCenterColorDataToDataTexture","updateIndexes","renderSplatCount","attributes","updateUniforms","renderDimensions","cameraFocalLengthX","cameraFocalLengthY","getSplatDataTextures","getCenters","getColors","getCovariances","createShader","gl","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","VERTEX_SHADER","FRAGMENT_SHADER","errors","getShaderInfoLog","deleteShader","getContext","currentVao","getParameter","VERTEX_ARRAY_BINDING","vao","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","DYNAMIC_DRAW","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","getIntegerCenters","padFour","floatCenters","intCenters","componentCount","getIntegerMatrixArray","matrixElements","intMatrixArray","STATIC_DRAW","computeDistancesOnGPU","viewProjMatrix","outComputedDistances","iViewProjMatrix","iViewProj","currentProgram","CURRENT_PROGRAM","enable","RASTERIZER_DISCARD","uniform3i","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","getBufferSubData","disable","Constants","sortWorker","self","wasmInstance","wasmMemory","indexesToSortOffset","sortedIndexesOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","viewProjOffset","countsZero","onmessage","e","postMessage","sortSetupComplete","renderCount","splatRenderCount","splatSortCount","viewProj","usePrecomputedDistances","sortStartTime","DepthMapRange","exports","sortIndexes","sortEndTime","sortDone","sortTime","init","CENTERS_BYTES_PER_ENTRY","BytesPerInt","sorterWasmBytes","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForViewProjMatrix","BytesPerFloat","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","params","cameraUp","initialCameraPosition","initialCameraLookAt","selfDrivenMode","useBuiltInControls","rootElement","usingExternalCamera","usingExternalRenderer","controls","ignoreDevicePixelRatio","window","selfDrivenUpdateFunc","selfDrivenUpdate","gpuAcceleratedSort","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","selfDrivenModeRunning","splatRenderingInitialized","raycaster","infoPanel","infoPanelCells","currentFPS","lastSortTime","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","initialized","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","precision","setPixelRatio","autoClear","setClearColor","setSize","Scene","onMouseUp","ResizeObserver","observe","setupInfoPanel","loadingSpinner","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","offsetX","offsetY","clickOffset","toNewFocalPoint","wasClick","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","padding","backgroundColor","border","zIndex","fontFamily","fontSize","textAlign","layout","infoTable","layoutEntry","labelCell","spacerCell","infoCell","parentElement","prepend","updateSplatMeshUniforms","projectionMatrix","loadFile","fileURL","options","orientation","showLoadingSpinner","downloadProgress","suffix","fileLoadPromise","endsWith","loadSplatBuffer","setTimeout","setupSplatMesh","setupSortWorker","frustumCulled","worker","Worker","toString","sorterWasmBinaryString","atob","charCodeAt","createSortWorker","sortCanceled","updateView","gatherSceneNodes","nodeRenderList","tempVectorYZ","tempVectorXZ","tempVector","tempMax","nodeSize","gatherAllNodes","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","start","requestAnimationFrame","stop","cancelAnimationFrame","updateFPS","lastCalcTime","frameCount","currentTime","updateForRendererSizeChanges","lastRendererSize","currentRendererSize","aspect","render","updateMeshCursor","timingSensitiveUpdates","updateInfo","updateControlPlane","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","lerp","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","cameraPos","cameraPosString","cameraPosition","cameraLookAt","cameraLookAtString","cameraUpString","cursorPos","cursorPosString","cursorPosition","fps","renderWindow","renderPct","savedAuoClear","hasRenderables","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedTiers","partialSorts","angleThreshold","sortFractions","force","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","premultiply","sortCount","partialSort","sortFraction","shift","getSplatMesh"],"mappings":"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"}